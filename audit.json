{
  "metadata": {
    "generated_at": 1761628055.7667572,
    "registry_version": "1.0.0",
    "sources": [
      "question_component_map.json",
      "execution_mapping.yaml",
      "policy_analysis_architecture.yaml",
      "policy_analysis_architecture.json"
    ]
  },
  "coverage": {
    "total_methods_in_codebase": 416,
    "declared_in_metadata": 124,
    "successfully_resolved": 8,
    "coverage_percentage": 6.451612903225806,
    "resolution_rate": 1.9230769230769231
  },
  "validation": {
    "provisional": {
      "passed": true,
      "threshold": 400,
      "total_methods": 416
    },
    "strict": {
      "passed": false,
      "threshold": 555,
      "total_methods": 416
    }
  },
  "missing": [
    "AdvancedDAGValidator._encontrar_caminos_completos",
    "AdvancedDAGValidator._validar_orden_causal",
    "AdvancedDAGValidator.calculate_acyclicity_pvalue",
    "AdvancedDAGValidator.validacion_completa",
    "AdvancedSemanticChunker.chunk_document",
    "Analyzer_one.py",
    "BayesianConfidenceCalculator.calculate_posterior",
    "BayesianEvidenceScorer.compute_evidence_score",
    "BayesianMechanismInference._infer_activity_sequence",
    "BayesianMechanismInference._test_necessity",
    "BayesianMechanismInference._test_sufficiency",
    "BayesianMechanismInference.infer_mechanisms",
    "BayesianNumericalAnalyzer._classify_evidence_strength",
    "BayesianNumericalAnalyzer.evaluate_policy_metric",
    "BeachEvidentialTest.apply_test_logic",
    "BeachEvidentialTest.classify_test",
    "CDAFFramework._validate_dnp_compliance",
    "CDAFFramework.process_document",
    "CausalExtractor._calculate_type_transition_prior",
    "CausalExtractor._extract_causal_links",
    "CausalExtractor._extract_goals",
    "CausalExtractor.extract_causal_hierarchy",
    "CausalInferenceSetup.assign_probative_value",
    "CausalInferenceSetup.classify_goal_dynamics",
    "CausalInferenceSetup.identify_failure_points",
    "FinancialAuditor._perform_counterfactual_budget_check",
    "FinancialAuditor.trace_financial_allocation",
    "IndustrialPolicyProcessor.__init__",
    "IndustrialPolicyProcessor._build_point_patterns",
    "IndustrialPolicyProcessor._compile_pattern_registry",
    "IndustrialPolicyProcessor._extract_point_evidence",
    "IndustrialPolicyProcessor._match_patterns_in_sentences",
    "IndustrialPolicyProcessor.process",
    "MechanismPartExtractor.extract_entity_activity",
    "MunicipalOntology.init",
    "OperationalizationAuditor._audit_systemic_risk",
    "OperationalizationAuditor._generate_optimal_remediations",
    "OperationalizationAuditor.audit_evidence_traceability",
    "OperationalizationAuditor.bayesian_counterfactual_audit",
    "PDETMunicipalPlanAnalyzer._break_cycles",
    "PDETMunicipalPlanAnalyzer._classify_tables",
    "PDETMunicipalPlanAnalyzer._find_mediator_mentions",
    "PDETMunicipalPlanAnalyzer._identify_confounders",
    "PDETMunicipalPlanAnalyzer.analyze_financial_feasibility",
    "PDETMunicipalPlanAnalyzer.analyze_municipal_plan",
    "PDETMunicipalPlanAnalyzer.construct_causal_dag",
    "PDETMunicipalPlanAnalyzer.estimate_causal_effects",
    "PDETMunicipalPlanAnalyzer.extract_tables",
    "PDETMunicipalPlanAnalyzer.generate_recommendations",
    "PDETMunicipalPlanAnalyzer.identify_responsible_entities",
    "PDETMunicipalPlanAnalyzer.sensitivity_analysis",
    "PDFProcessor.extract_tables",
    "PDFProcessor.extract_text",
    "PerformanceAnalyzer.analyze_loss_function",
    "PolicyAnalysisEmbedder.process_document",
    "PolicyAnalysisPipeline.__init__",
    "PolicyContradictionDetector._are_comparable_claims",
    "PolicyContradictionDetector._are_conflicting_allocations",
    "PolicyContradictionDetector._build_knowledge_graph",
    "PolicyContradictionDetector._calculate_confidence_interval",
    "PolicyContradictionDetector._calculate_contradiction_entropy",
    "PolicyContradictionDetector._calculate_global_semantic_coherence",
    "PolicyContradictionDetector._calculate_graph_fragmentation",
    "PolicyContradictionDetector._calculate_numerical_divergence",
    "PolicyContradictionDetector._calculate_objective_alignment",
    "PolicyContradictionDetector._calculate_syntactic_complexity",
    "PolicyContradictionDetector._classify_contradiction",
    "PolicyContradictionDetector._detect_logical_incompatibilities",
    "PolicyContradictionDetector._detect_numerical_inconsistencies",
    "PolicyContradictionDetector._detect_resource_conflicts",
    "PolicyContradictionDetector._detect_temporal_conflicts",
    "PolicyContradictionDetector._determine_relation_type",
    "PolicyContradictionDetector._determine_semantic_role",
    "PolicyContradictionDetector._extract_quantitative_claims",
    "PolicyContradictionDetector._extract_resource_mentions",
    "PolicyContradictionDetector._extract_temporal_markers",
    "PolicyContradictionDetector._generate_embeddings",
    "PolicyContradictionDetector._generate_resolution_recommendations",
    "PolicyContradictionDetector._get_context_window",
    "PolicyContradictionDetector._get_dependency_depth",
    "PolicyContradictionDetector._get_graph_statistics",
    "PolicyContradictionDetector._has_logical_conflict",
    "PolicyContradictionDetector._identify_affected_sections",
    "PolicyContradictionDetector._identify_dependencies",
    "PolicyContradictionDetector._initialize_pdm_patterns",
    "PolicyContradictionDetector._parse_number",
    "PolicyContradictionDetector._statistical_significance_test",
    "PolicyContradictionDetector._suggest_resolutions",
    "PolicyContradictionDetector._text_similarity",
    "PolicyContradictionDetector.detect",
    "PolicyContradictionDetector.init",
    "PolicyTextProcessor.extract_contextual_window",
    "ReportAssembler._generate_explanation",
    "ReportAssembler._score_type_a",
    "ReportAssembler._score_type_b",
    "ReportAssembler._score_type_c",
    "ReportAssembler._score_type_d",
    "ReportAssembler._score_type_e",
    "ReportAssembler._score_type_f",
    "ReportAssembler.generate_macro_convergence",
    "ReportAssembler.generate_meso_cluster",
    "ReportAssembler.generate_micro_answer",
    "SemanticAnalyzer.init",
    "TemporalLogicVerifier._build_timeline",
    "TemporalLogicVerifier._check_deadline_constraints",
    "TemporalLogicVerifier._classify_temporal_type",
    "TemporalLogicVerifier._extract_resources",
    "TemporalLogicVerifier._parse_temporal_marker",
    "TemporalLogicVerifier.verify_temporal_consistency",
    "TeoriaCambio._encontrar_caminos_completos",
    "TeoriaCambio._execute_generar_sugerencias_internas",
    "TeoriaCambio._extraer_categorias",
    "TeoriaCambio._generar_sugerencias_internas",
    "TeoriaCambio._validar_orden_causal",
    "TeoriaCambio.construir_grafo_causal",
    "TeoriaCambio.validacion_completa"
  ],
  "extras": [],
  "class_coverage": {
    "total_classes": 81,
    "mapped_classes": 29
  }
}