{
  "generated_at": "2025-10-22T12:00:00",
  "root_directory": "/Users/recovered/PycharmProjects/SAAAAAA",
  "note": "COMPLETE EXHAUSTIVE INVENTORY - ALL 8 FILES, ALL CLASSES, ALL METHODS",
  "statistics": {
    "total_files": 8,
    "total_classes": 67,
    "total_methods": 584,
    "total_lines_of_code": 15649
  },
  "files": [
    {
      "file_path": "financiero_viabilidad_tablas.py",
      "lines_of_code": 2335,
      "role": "data_producer",
      "adapter": "FinancieroViabilidadAdapter",
      "classes": [
        {"name": "ColombianMunicipalContext", "type": "config_class", "methods": []},
        {"name": "CausalNode", "type": "dataclass", "methods": []},
        {"name": "CausalEdge", "type": "dataclass", "methods": []},
        {"name": "CausalDAG", "type": "dataclass", "methods": []},
        {"name": "CausalEffect", "type": "dataclass", "methods": []},
        {"name": "CounterfactualScenario", "type": "dataclass", "methods": []},
        {"name": "ExtractedTable", "type": "dataclass", "methods": []},
        {"name": "FinancialIndicator", "type": "dataclass", "methods": []},
        {"name": "ResponsibleEntity", "type": "dataclass", "methods": []},
        {"name": "QualityScore", "type": "dataclass", "methods": []},
        {
          "name": "PDETMunicipalPlanAnalyzer",
          "type": "main_class",
          "methods": [
            "__init__", "_get_spanish_stopwords", "extract_tables", "_clean_dataframe", "_is_likely_header",
            "_deduplicate_tables", "_reconstruct_fragmented_tables", "_classify_tables",
            "analyze_financial_feasibility", "_extract_financial_amounts", "_identify_funding_source",
            "_extract_from_budget_table", "_analyze_funding_sources", "_assess_financial_sustainability",
            "_bayesian_risk_inference", "_interpret_risk", "_indicator_to_dict", "identify_responsible_entities",
            "_extract_entities_ner", "_extract_entities_syntax", "_classify_entity_type",
            "_extract_from_responsibility_tables", "_consolidate_entities", "_score_entity_specificity",
            "construct_causal_dag", "_identify_causal_nodes", "_find_semantic_mentions",
            "_find_outcome_mentions", "_find_mediator_mentions", "_extract_budget_for_pillar",
            "_identify_causal_edges", "_match_text_to_node", "_refine_edge_probabilities", "_break_cycles",
            "estimate_causal_effects", "_estimate_effect_bayesian", "_get_prior_effect", "_identify_confounders",
            "generate_counterfactuals", "_simulate_intervention", "_generate_scenario_narrative",
            "sensitivity_analysis", "_compute_e_value", "_compute_robustness_value", "_interpret_sensitivity",
            "calculate_quality_score", "_score_financial_component", "_score_indicators",
            "_score_responsibility_clarity", "_score_temporal_consistency", "_score_pdet_alignment",
            "_score_causal_coherence", "_estimate_score_confidence", "export_causal_network",
            "generate_executive_report", "_interpret_overall_quality", "_generate_recommendations",
            "analyze_municipal_plan", "_extract_full_text", "_entity_to_dict", "_effect_to_dict",
            "_scenario_to_dict", "_quality_to_dict"
          ]
        }
      ],
      "functions": ["validate_pdf_path", "setup_logging", "main_example"]
    },
    {
      "file_path": "Analyzer_one.py",
      "lines_of_code": 1438,
      "role": "data_producer",
      "adapter": "MunicipalAnalyzerAdapter",
      "classes": [
        {"name": "ValueChainLink", "type": "dataclass", "methods": []},
        {"name": "MunicipalOntology", "type": "main_class", "methods": ["__init__"]},
        {
          "name": "SemanticAnalyzer",
          "type": "main_class",
          "methods": [
            "__init__", "extract_semantic_cube", "_empty_semantic_cube", "_vectorize_segments",
            "_process_segment", "_classify_value_chain_link", "_classify_policy_domain",
            "_classify_cross_cutting_themes", "_calculate_semantic_complexity"
          ]
        },
        {
          "name": "PerformanceAnalyzer",
          "type": "main_class",
          "methods": [
            "__init__", "analyze_performance", "_calculate_throughput_metrics", "_detect_bottlenecks",
            "_calculate_loss_functions", "_generate_recommendations"
          ]
        },
        {
          "name": "TextMiningEngine",
          "type": "main_class",
          "methods": [
            "__init__", "diagnose_critical_links", "_identify_critical_links", "_analyze_link_text",
            "_assess_risks", "_generate_interventions"
          ]
        },
        {
          "name": "MunicipalAnalyzer",
          "type": "orchestrator",
          "methods": [
            "__init__", "analyze_document", "_load_document", "_generate_summary"
          ]
        },
        {
          "name": "DocumentProcessor",
          "type": "utility_class",
          "methods": ["load_pdf", "load_docx", "segment_text"]
        },
        {
          "name": "ResultsExporter",
          "type": "utility_class",
          "methods": ["export_to_json", "export_to_excel", "export_summary_report"]
        },
        {
          "name": "ConfigurationManager",
          "type": "utility_class",
          "methods": ["__init__", "load_config", "save_config"]
        },
        {
          "name": "BatchProcessor",
          "type": "utility_class",
          "methods": ["__init__", "process_directory", "export_batch_results", "_create_batch_summary"]
        }
      ],
      "functions": ["example_usage", "main"]
    },
    {
      "file_path": "contradiction_deteccion.py",
      "lines_of_code": 1494,
      "role": "data_producer",
      "adapter": "ContradictionDetectorAdapter",
      "enums": ["ContradictionType", "PolicyDimension"],
      "classes": [
        {"name": "PolicyStatement", "type": "dataclass", "methods": []},
        {"name": "ContradictionEvidence", "type": "dataclass", "methods": []},
        {
          "name": "BayesianConfidenceCalculator",
          "type": "main_class",
          "methods": ["__init__", "calculate_posterior"]
        },
        {
          "name": "TemporalLogicVerifier",
          "type": "main_class",
          "methods": [
            "__init__", "verify_temporal_consistency", "_build_timeline", "_parse_temporal_marker",
            "_has_temporal_conflict", "_are_mutually_exclusive", "_extract_resources",
            "_check_deadline_constraints", "_should_precede", "_classify_temporal_type"
          ]
        },
        {
          "name": "PolicyContradictionDetector",
          "type": "main_class",
          "methods": [
            "__init__", "_initialize_pdm_patterns", "detect", "_extract_policy_statements",
            "_generate_embeddings", "_build_knowledge_graph", "_detect_semantic_contradictions",
            "_detect_numerical_inconsistencies", "_detect_temporal_conflicts",
            "_detect_logical_incompatibilities", "_detect_resource_conflicts",
            "_calculate_coherence_metrics", "_calculate_global_semantic_coherence",
            "_calculate_objective_alignment", "_calculate_graph_fragmentation",
            "_calculate_contradiction_entropy", "_calculate_syntactic_complexity",
            "_get_dependency_depth", "_calculate_confidence_interval",
            "_generate_resolution_recommendations", "_identify_affected_sections",
            "_serialize_contradiction", "_get_graph_statistics", "_extract_temporal_markers",
            "_extract_quantitative_claims", "_parse_number", "_extract_resource_mentions",
            "_determine_semantic_role", "_identify_dependencies", "_get_context_window",
            "_calculate_similarity", "_classify_contradiction", "_get_domain_weight",
            "_suggest_resolutions", "_are_comparable_claims", "_text_similarity",
            "_calculate_numerical_divergence", "_statistical_significance_test",
            "_has_logical_conflict", "_are_conflicting_allocations", "_determine_relation_type",
            "_calculate_severity"
          ]
        }
      ],
      "functions": []
    },
    {
      "file_path": "embedding_policy.py",
      "lines_of_code": 1496,
      "role": "data_producer",
      "adapter": "EmbeddingPolicyAdapter",
      "enums": ["PolicyDomain", "AnalyticalDimension"],
      "classes": [
        {"name": "PDQIdentifier", "type": "TypedDict", "methods": []},
        {"name": "SemanticChunk", "type": "TypedDict", "methods": []},
        {"name": "BayesianEvaluation", "type": "TypedDict", "methods": []},
        {"name": "ChunkingConfig", "type": "dataclass", "methods": []},
        {
          "name": "AdvancedSemanticChunker",
          "type": "main_class",
          "methods": [
            "__init__", "chunk_document", "_normalize_text", "_recursive_split",
            "_find_sentence_boundary", "_extract_sections", "_extract_tables",
            "_extract_lists", "_infer_pdq_context", "_contains_table", "_contains_list",
            "_find_section"
          ]
        },
        {
          "name": "BayesianNumericalAnalyzer",
          "type": "main_class",
          "methods": [
            "__init__", "evaluate_policy_metric", "_beta_binomial_posterior",
            "_normal_normal_posterior", "_classify_evidence_strength", "_compute_coherence",
            "_null_evaluation", "compare_policies"
          ]
        },
        {
          "name": "PolicyCrossEncoderReranker",
          "type": "main_class",
          "methods": ["__init__", "rerank"]
        },
        {"name": "PolicyEmbeddingConfig", "type": "dataclass", "methods": []},
        {
          "name": "PolicyAnalysisEmbedder",
          "type": "orchestrator",
          "methods": [
            "__init__", "process_document", "semantic_search",
            "evaluate_policy_numerical_consistency", "compare_policy_interventions",
            "generate_pdq_report", "_embed_texts", "_filter_by_pdq", "_apply_mmr",
            "_extract_numerical_values", "_generate_query_from_pdq",
            "_compute_overall_confidence", "_cached_similarity", "get_diagnostics"
          ]
        }
      ],
      "functions": ["create_policy_embedder", "example_pdm_analysis"]
    },
    {
      "file_path": "teoria_cambio.py",
      "lines_of_code": 914,
      "role": "data_producer",
      "adapter": "TeoriaCambioAdapter",
      "enums": ["CategoriaCausal", "GraphType"],
      "classes": [
        {"name": "ValidacionResultado", "type": "dataclass", "methods": []},
        {"name": "ValidationMetric", "type": "dataclass", "methods": []},
        {"name": "AdvancedGraphNode", "type": "dataclass", "methods": ["__post_init__"]},
        {"name": "MonteCarloAdvancedResult", "type": "dataclass", "methods": []},
        {
          "name": "TeoriaCambio",
          "type": "main_class",
          "methods": [
            "__init__", "_es_conexion_valida", "construir_grafo_causal",
            "validacion_completa", "_extraer_categorias", "_validar_orden_causal",
            "_encontrar_caminos_completos", "_generar_sugerencias_internas"
          ]
        },
        {
          "name": "AdvancedDAGValidator",
          "type": "main_class",
          "methods": [
            "__init__", "add_node", "add_edge", "_initialize_rng", "_is_acyclic",
            "_generate_subgraph", "calculate_acyclicity_pvalue",
            "_perform_sensitivity_analysis_internal", "_calculate_confidence_interval",
            "_calculate_statistical_power", "_calculate_bayesian_posterior",
            "_calculate_node_importance", "get_graph_stats", "_create_empty_result"
          ]
        },
        {
          "name": "IndustrialGradeValidator",
          "type": "main_class",
          "methods": [
            "__init__", "execute_suite", "validate_engine_readiness",
            "validate_causal_categories", "validate_connection_matrix",
            "run_performance_benchmarks", "_benchmark_operation", "_log_metric"
          ]
        }
      ],
      "functions": ["_create_advanced_seed", "create_policy_theory_of_change_graph", "main"]
    },
    {
      "file_path": "dereck_beach.py",
      "lines_of_code": 4051,
      "role": "data_producer",
      "adapter": "CausalDeconstructionAdapter",
      "enums": ["NodeType", "RigorStatus", "TestType", "DynamicsType"],
      "classes": [
        {
          "name": "BeachEvidentialTest",
          "type": "main_class",
          "methods": ["classify_test", "apply_test_logic"]
        },
        {"name": "CDAFException", "type": "exception", "methods": ["__init__", "_format_message", "to_dict"]},
        {"name": "CDAFValidationError", "type": "exception", "methods": []},
        {"name": "CDAFProcessingError", "type": "exception", "methods": []},
        {"name": "CDAFBayesianError", "type": "exception", "methods": []},
        {"name": "CDAFConfigError", "type": "exception", "methods": []},
        {"name": "BayesianThresholdsConfig", "type": "pydantic_model", "methods": []},
        {"name": "MechanismTypeConfig", "type": "pydantic_model", "methods": ["check_sum_to_one"]},
        {"name": "PerformanceConfig", "type": "pydantic_model", "methods": []},
        {"name": "SelfReflectionConfig", "type": "pydantic_model", "methods": []},
        {"name": "CDAFConfigSchema", "type": "pydantic_model", "methods": []},
        {"name": "GoalClassification", "type": "NamedTuple", "methods": []},
        {"name": "EntityActivity", "type": "NamedTuple", "methods": []},
        {"name": "CausalLink", "type": "TypedDict", "methods": []},
        {"name": "AuditResult", "type": "TypedDict", "methods": []},
        {"name": "MetaNode", "type": "dataclass", "methods": []},
        {
          "name": "ConfigLoader",
          "type": "main_class",
          "methods": [
            "__init__", "_load_config", "_load_default_config", "_validate_config",
            "get", "get_bayesian_threshold", "get_mechanism_prior",
            "get_performance_setting", "update_priors_from_feedback",
            "_save_prior_history", "_load_uncertainty_history",
            "check_uncertainty_reduction_criterion"
          ]
        },
        {
          "name": "PDFProcessor",
          "type": "main_class",
          "methods": ["__init__", "load_document", "extract_text", "extract_tables", "extract_sections"]
        },
        {
          "name": "CausalExtractor",
          "type": "main_class",
          "methods": [
            "__init__", "extract_causal_hierarchy", "_extract_goals", "_parse_goal_context",
            "_add_node_to_graph", "_extract_causal_links", "_calculate_semantic_distance",
            "_calculate_type_transition_prior", "_check_structural_violation",
            "_calculate_language_specificity", "_assess_temporal_coherence",
            "_assess_financial_consistency", "_calculate_textual_proximity",
            "_initialize_prior", "_calculate_composite_likelihood", "_build_type_hierarchy"
          ]
        },
        {
          "name": "MechanismPartExtractor",
          "type": "main_class",
          "methods": ["__init__", "extract_entity_activity", "_normalize_entity"]
        },
        {
          "name": "FinancialAuditor",
          "type": "main_class",
          "methods": [
            "__init__", "trace_financial_allocation", "_process_financial_table",
            "_parse_amount", "_match_program_to_node", "_perform_counterfactual_budget_check"
          ]
        },
        {
          "name": "OperationalizationAuditor",
          "type": "main_class",
          "methods": [
            "__init__", "audit_evidence_traceability", "audit_sequence_logic",
            "bayesian_counterfactual_audit", "_build_normative_dag",
            "_get_default_historical_priors", "_audit_direct_evidence",
            "_audit_causal_implications", "_audit_systemic_risk",
            "_generate_optimal_remediations", "_get_remediation_text"
          ]
        },
        {
          "name": "BayesianMechanismInference",
          "type": "main_class",
          "methods": [
            "__init__", "_log_refactored_components", "infer_mechanisms",
            "_infer_single_mechanism", "_extract_observations", "_infer_mechanism_type",
            "_infer_activity_sequence", "_calculate_coherence_factor",
            "_test_sufficiency", "_test_necessity", "_generate_necessity_remediation",
            "_quantify_uncertainty", "_detect_gaps"
          ]
        },
        {
          "name": "CausalInferenceSetup",
          "type": "main_class",
          "methods": [
            "__init__", "classify_goal_dynamics", "assign_probative_value",
            "identify_failure_points"
          ]
        },
        {
          "name": "ReportingEngine",
          "type": "main_class",
          "methods": [
            "__init__", "generate_causal_diagram", "generate_accountability_matrix",
            "generate_confidence_report", "_calculate_quality_score",
            "generate_causal_model_json"
          ]
        },
        {
          "name": "CDAFFramework",
          "type": "orchestrator",
          "methods": [
            "__init__", "process_document", "_extract_feedback_from_audit",
            "_validate_dnp_compliance", "_generate_dnp_report", "_generate_bayesian_reports"
          ]
        }
      ],
      "functions": ["main"]
    },
    {
      "file_path": "policy_processor.py",
      "lines_of_code": 1120,
      "role": "data_producer",
      "adapter": "PolicyProcessorAdapter",
      "enums": ["CausalDimension"],
      "classes": [
        {"name": "ProcessorConfig", "type": "dataclass", "methods": ["from_legacy", "validate"]},
        {
          "name": "BayesianEvidenceScorer",
          "type": "main_class",
          "methods": ["__init__", "compute_evidence_score", "_calculate_shannon_entropy"]
        },
        {
          "name": "PolicyTextProcessor",
          "type": "main_class",
          "methods": [
            "__init__", "normalize_unicode", "segment_into_sentences",
            "extract_contextual_window", "compile_pattern"
          ]
        },
        {"name": "EvidenceBundle", "type": "dataclass", "methods": ["to_dict"]},
        {
          "name": "IndustrialPolicyProcessor",
          "type": "orchestrator",
          "methods": [
            "__init__", "_load_questionnaire", "_compile_pattern_registry",
            "_build_point_patterns", "process", "_match_patterns_in_sentences",
            "_compute_evidence_confidence", "_construct_evidence_bundle",
            "_extract_point_evidence", "_analyze_causal_dimensions",
            "_extract_metadata", "_compute_avg_confidence", "_empty_result",
            "export_results"
          ]
        },
        {
          "name": "AdvancedTextSanitizer",
          "type": "main_class",
          "methods": ["__init__", "sanitize", "_protect_structure", "_restore_structure"]
        },
        {
          "name": "ResilientFileHandler",
          "type": "main_class",
          "methods": ["read_text", "write_text"]
        },
        {
          "name": "PolicyAnalysisPipeline",
          "type": "orchestrator",
          "methods": ["__init__", "analyze_file", "analyze_text"]
        }
      ],
      "functions": ["create_policy_processor", "main"]
    },
    {
      "file_path": "report_assembly.py",
      "lines_of_code": 1715,
      "role": "aggregator",
      "adapter": "ReportAssemblerAdapter",
      "classes": [
        {"name": "MicroLevelAnswer", "type": "dataclass", "methods": []},
        {"name": "MesoLevelCluster", "type": "dataclass", "methods": []},
        {"name": "MacroLevelConvergence", "type": "dataclass", "methods": []},
        {
          "name": "ReportAssembler",
          "type": "aggregator",
          "methods": [
            "__init__", "generate_micro_answer", "_apply_scoring_modality",
            "_score_type_a", "_score_type_b", "_score_type_c", "_score_type_d",
            "_score_type_e", "_score_type_f", "_evaluate_condition", "_score_default",
            "_extract_numerical_value", "_extract_pattern_matches",
            "_score_to_qualitative_question", "_extract_evidence_excerpts",
            "_find_context_around", "_calculate_confidence", "_generate_explanation",
            "_summarize_module_data", "generate_meso_cluster",
            "_calculate_dimension_scores", "_identify_strengths", "_identify_weaknesses",
            "_generate_cluster_recommendations", "_assess_evidence_quality",
            "_calculate_score_distribution", "generate_macro_convergence",
            "_calculate_dimension_convergence", "_calculate_policy_area_convergence",
            "_perform_gap_analysis", "_calculate_agenda_alignment",
            "_identify_critical_gaps", "_generate_strategic_recommendations",
            "_classify_plan", "_synthesize_evidence", "_generate_implementation_roadmap",
            "_calculate_overall_distribution", "_calculate_confidence_metrics",
            "export_report"
          ]
        }
      ],
      "functions": []
    }
  ]
}
