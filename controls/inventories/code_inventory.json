{
  "files": {
    "Analyzer_one.py": {
      "classes": [
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 87,
          "line_start": 77,
          "methods": [],
          "name": "ValueChainLink"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 142,
          "line_start": 90,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 142,
              "line_start": 93,
              "name": "__init__",
              "parameters": [
                "self"
              ],
              "return_annotation": null
            }
          ],
          "name": "MunicipalOntology"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 372,
          "line_start": 149,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 161,
              "line_start": 152,
              "name": "__init__",
              "parameters": [
                "self",
                "ontology: MunicipalOntology"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 233,
              "line_start": 163,
              "name": "extract_semantic_cube",
              "parameters": [
                "self",
                "document_segments: List[str]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 254,
              "line_start": 235,
              "name": "_empty_semantic_cube",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 269,
              "line_start": 256,
              "name": "_vectorize_segments",
              "parameters": [
                "self",
                "segments: List[str]"
              ],
              "return_annotation": "np.ndarray"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 306,
              "line_start": 271,
              "name": "_process_segment",
              "parameters": [
                "self",
                "segment: str",
                "idx: int",
                "vector"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 329,
              "line_start": 308,
              "name": "_classify_value_chain_link",
              "parameters": [
                "self",
                "segment: str"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 344,
              "line_start": 331,
              "name": "_classify_policy_domain",
              "parameters": [
                "self",
                "segment: str"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 359,
              "line_start": 346,
              "name": "_classify_cross_cutting_themes",
              "parameters": [
                "self",
                "segment: str"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 372,
              "line_start": 361,
              "name": "_calculate_semantic_complexity",
              "parameters": [
                "self",
                "semantic_cube: Dict[(str, Any)]"
              ],
              "return_annotation": "float"
            }
          ],
          "name": "SemanticAnalyzer"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 548,
          "line_start": 379,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 387,
              "line_start": 382,
              "name": "__init__",
              "parameters": [
                "self",
                "ontology: MunicipalOntology"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 418,
              "line_start": 389,
              "name": "analyze_performance",
              "parameters": [
                "self",
                "semantic_cube: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 456,
              "line_start": 420,
              "name": "_calculate_throughput_metrics",
              "parameters": [
                "self",
                "segments: List[Dict]",
                "link_config: ValueChainLink"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 490,
              "line_start": 458,
              "name": "_detect_bottlenecks",
              "parameters": [
                "self",
                "segments: List[Dict]",
                "link_config: ValueChainLink"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 524,
              "line_start": 492,
              "name": "_calculate_loss_functions",
              "parameters": [
                "self",
                "metrics: Dict[(str, Any)]",
                "link_config: ValueChainLink"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 548,
              "line_start": 526,
              "name": "_generate_recommendations",
              "parameters": [
                "self",
                "performance_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "List[Dict[(str, Any)]]"
            }
          ],
          "name": "PerformanceAnalyzer"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 730,
          "line_start": 555,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 573,
              "line_start": 558,
              "name": "__init__",
              "parameters": [
                "self",
                "ontology: MunicipalOntology"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 609,
              "line_start": 575,
              "name": "diagnose_critical_links",
              "parameters": [
                "self",
                "semantic_cube: Dict[(str, Any)]",
                "performance_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 636,
              "line_start": 611,
              "name": "_identify_critical_links",
              "parameters": [
                "self",
                "performance_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 673,
              "line_start": 638,
              "name": "_analyze_link_text",
              "parameters": [
                "self",
                "segments: List[Dict]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 701,
              "line_start": 675,
              "name": "_assess_risks",
              "parameters": [
                "self",
                "segments: List[Dict]",
                "text_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 730,
              "line_start": 703,
              "name": "_generate_interventions",
              "parameters": [
                "self",
                "link_name: str",
                "risk_assessment: Dict[(str, Any)]",
                "text_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "List[Dict[(str, str)]]"
            }
          ],
          "name": "TextMiningEngine"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 854,
          "line_start": 737,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 746,
              "line_start": 740,
              "name": "__init__",
              "parameters": [
                "self"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 788,
              "line_start": 748,
              "name": "analyze_document",
              "parameters": [
                "self",
                "document_path: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 810,
              "line_start": 790,
              "name": "_load_document",
              "parameters": [
                "self",
                "document_path: str"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 854,
              "line_start": 812,
              "name": "_generate_summary",
              "parameters": [
                "self",
                "semantic_cube: Dict[(str, Any)]",
                "performance_analysis: Dict[(str, Any)]",
                "critical_diagnosis: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            }
          ],
          "name": "MunicipalAnalyzer"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1059,
          "line_start": 980,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 999,
              "line_start": 984,
              "name": "load_pdf",
              "parameters": [
                "pdf_path: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1016,
              "line_start": 1002,
              "name": "load_docx",
              "parameters": [
                "docx_path: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1059,
              "line_start": 1019,
              "name": "segment_text",
              "parameters": [
                "text: str",
                "method: str"
              ],
              "return_annotation": "List[str]"
            }
          ],
          "name": "DocumentProcessor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1208,
          "line_start": 1062,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1073,
              "line_start": 1066,
              "name": "export_to_json",
              "parameters": [
                "results: Dict[(str, Any)]",
                "output_path: str"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1138,
              "line_start": 1076,
              "name": "export_to_excel",
              "parameters": [
                "results: Dict[(str, Any)]",
                "output_path: str"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1208,
              "line_start": 1141,
              "name": "export_summary_report",
              "parameters": [
                "results: Dict[(str, Any)]",
                "output_path: str"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "ResultsExporter"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1301,
          "line_start": 1253,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1258,
              "line_start": 1256,
              "name": "__init__",
              "parameters": [
                "self",
                "config_path: Optional[str]"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1293,
              "line_start": 1260,
              "name": "load_config",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1301,
              "line_start": 1295,
              "name": "save_config",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "ConfigurationManager"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1398,
          "line_start": 1304,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1308,
              "line_start": 1307,
              "name": "__init__",
              "parameters": [
                "self",
                "analyzer: MunicipalAnalyzer"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1331,
              "line_start": 1310,
              "name": "process_directory",
              "parameters": [
                "self",
                "directory_path: str",
                "pattern: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1353,
              "line_start": 1333,
              "name": "export_batch_results",
              "parameters": [
                "self",
                "batch_results: Dict[(str, Any)]",
                "output_dir: str"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1398,
              "line_start": 1355,
              "name": "_create_batch_summary",
              "parameters": [
                "self",
                "batch_results: Dict[(str, Any)]",
                "output_path: Path"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "BatchProcessor"
        }
      ],
      "content_hash": "00c2faaa941bb24611f446743866e5e2",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/Analyzer_one.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 977,
          "line_start": 860,
          "name": "example_usage",
          "parameters": [],
          "return_annotation": null
        },
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 1434,
          "line_start": 1402,
          "name": "main",
          "parameters": [],
          "return_annotation": null
        }
      ],
      "imports": [
        "json",
        "logging",
        "math",
        "statistics",
        "re",
        "hashlib",
        "abc.ABC",
        "abc.abstractmethod",
        "collections.defaultdict",
        "collections.Counter",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "functools.cached_property",
        "functools.wraps",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Sequence",
        "typing.Mapping",
        "typing.Union",
        "typing.Set",
        "typing.Callable",
        "typing.TypeVar",
        "typing.Generic",
        "typing.NamedTuple",
        "typing.Iterator",
        "typing.Protocol",
        "random",
        "itertools",
        "heapq",
        "bisect",
        "threading",
        "contextlib.contextmanager",
        "time",
        "pickle",
        "base64",
        "zlib",
        "warnings",
        "sklearn.feature_extraction.text.TfidfVectorizer",
        "sklearn.ensemble.IsolationForest",
        "numpy",
        "pandas",
        "nltk.tokenize.sent_tokenize",
        "nltk.corpus.stopwords",
        "argparse",
        "os",
        "PyPDF2",
        "docx",
        "nltk",
        "nltk"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.745035",
      "lines_of_code": 1019,
      "orphan_reason": null,
      "relative_path": "Analyzer_one.py",
      "sha256_hash": "e0ce2f28ff367bc6b1be79b3c38a40af11ed54e63ce5c1089c270cce619a1c20"
    },
    "choreographer.py": {
      "classes": [
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 96,
          "line_start": 89,
          "methods": [],
          "name": "ExecutionContext"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 109,
          "line_start": 100,
          "methods": [],
          "name": "ExecutionResult"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 121,
          "line_start": 113,
          "methods": [],
          "name": "ProvenanceRecord"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1059,
          "line_start": 128,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 180,
              "line_start": 141,
              "name": "__init__",
              "parameters": [
                "self",
                "execution_mapping_path: str",
                "method_class_map_path: str",
                "config_path: str"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 202,
              "line_start": 186,
              "name": "_load_execution_mapping",
              "parameters": [
                "self",
                "path: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 221,
              "line_start": 204,
              "name": "_load_method_class_map",
              "parameters": [
                "self",
                "path: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 239,
              "line_start": 223,
              "name": "_load_config",
              "parameters": [
                "self",
                "path: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 253,
              "line_start": 241,
              "name": "_get_default_execution_mapping",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 264,
              "line_start": 255,
              "name": "_get_default_method_map",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 308,
              "line_start": 270,
              "name": "_initialize_producers",
              "parameters": [
                "self"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 325,
              "line_start": 310,
              "name": "_init_dereck_beach",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 340,
              "line_start": 327,
              "name": "_init_policy_processor",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 358,
              "line_start": 342,
              "name": "_init_embedding_policy",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 374,
              "line_start": 360,
              "name": "_init_semantic_chunking",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 388,
              "line_start": 376,
              "name": "_init_teoria_cambio",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 402,
              "line_start": 390,
              "name": "_init_contradiction_detection",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 415,
              "line_start": 404,
              "name": "_init_financiero_viabilidad",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 427,
              "line_start": 417,
              "name": "_init_report_assembly",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 440,
              "line_start": 429,
              "name": "_init_analyzer_one",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 545,
              "line_start": 446,
              "name": "execute_question",
              "parameters": [
                "self",
                "question_spec: Dict[(str, Any)]",
                "plan_document: str",
                "plan_metadata: Dict[(str, Any)]"
              ],
              "return_annotation": "ExecutionResult"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 575,
              "line_start": 547,
              "name": "_hydrate_execution_context",
              "parameters": [
                "self",
                "question_spec: Dict[(str, Any)]"
              ],
              "return_annotation": "ExecutionContext"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 611,
              "line_start": 577,
              "name": "_get_execution_chain",
              "parameters": [
                "self",
                "dimension: str",
                "question_spec: Dict[(str, Any)]"
              ],
              "return_annotation": "List[Dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 619,
              "line_start": 613,
              "name": "_get_default_chain",
              "parameters": [
                "self",
                "dimension: str"
              ],
              "return_annotation": "List[Dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 627,
              "line_start": 621,
              "name": "_generate_execution_id",
              "parameters": [
                "self",
                "question_spec: Dict[(str, Any)]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 647,
              "line_start": 629,
              "name": "_init_provenance",
              "parameters": [
                "self",
                "execution_id: str",
                "context: ExecutionContext"
              ],
              "return_annotation": "ProvenanceRecord"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 714,
              "line_start": 653,
              "name": "_execute_pipeline",
              "parameters": [
                "self",
                "context: ExecutionContext",
                "plan_document: str",
                "plan_metadata: Dict[(str, Any)]",
                "execution_trace: List[Dict[(str, Any)]]",
                "provenance: ProvenanceRecord"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 760,
              "line_start": 716,
              "name": "_execute_method",
              "parameters": [
                "self",
                "module_name: str",
                "method_name: str",
                "plan_document: str",
                "plan_metadata: Dict[(str, Any)]",
                "previous_results: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 776,
              "line_start": 764,
              "name": "_exec_policy_processor",
              "parameters": [
                "self",
                "method_name: str",
                "plan_document: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 791,
              "line_start": 778,
              "name": "_exec_semantic_chunking",
              "parameters": [
                "self",
                "method_name: str",
                "plan_document: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 813,
              "line_start": 793,
              "name": "_exec_dereck_beach",
              "parameters": [
                "self",
                "method_name: str",
                "plan_document: str",
                "previous_results: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 830,
              "line_start": 815,
              "name": "_exec_embedding_policy",
              "parameters": [
                "self",
                "method_name: str",
                "plan_document: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 844,
              "line_start": 832,
              "name": "_exec_teoria_cambio",
              "parameters": [
                "self",
                "method_name: str",
                "previous_results: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 858,
              "line_start": 846,
              "name": "_exec_contradiction_detection",
              "parameters": [
                "self",
                "method_name: str",
                "plan_document: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 942,
              "line_start": 860,
              "name": "_exec_financiero_viabilidad",
              "parameters": [
                "self",
                "method_name: str",
                "plan_document: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 993,
              "line_start": 944,
              "name": "_exec_analyzer_one",
              "parameters": [
                "self",
                "method_name: str",
                "plan_document: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1037,
              "line_start": 995,
              "name": "_generate_micro_answer",
              "parameters": [
                "self",
                "question_spec: Dict[(str, Any)]",
                "execution_results: Dict[(str, Any)]",
                "plan_document: str",
                "execution_trace: List[Dict[(str, Any)]]"
              ],
              "return_annotation": "Optional[MicroLevelAnswer]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1059,
              "line_start": 1043,
              "name": "get_statistics",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            }
          ],
          "name": "ExecutionChoreographer"
        },
        {
          "bases": [],
          "has_docstring": false,
          "line_end": 1023,
          "line_start": 1015,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1023,
              "line_start": 1016,
              "name": "__init__",
              "parameters": [
                "self",
                "spec"
              ],
              "return_annotation": null
            }
          ],
          "name": "QuestionSpec"
        }
      ],
      "content_hash": "be029dce728e16e4817ce1a71d4a9aac",
      "dependencies": [
        "policy_processor.py",
        "dereck_beach.py",
        "teoria_cambio.py",
        "Analyzer_one.py",
        "contradiction_deteccion.py",
        "semantic_chunking_policy.py",
        "embedding_policy.py",
        "report_assembly.py",
        "financiero_viabilidad_tablas.py"
      ],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/choreographer.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 1137,
          "line_start": 1066,
          "name": "example_usage",
          "parameters": [],
          "return_annotation": null
        }
      ],
      "imports": [
        "json",
        "logging",
        "time",
        "hashlib",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "datetime.datetime",
        "yaml",
        "traceback",
        "dereck_beach.BeachEvidentialTest",
        "dereck_beach.ConfigLoader",
        "dereck_beach.PDFProcessor",
        "dereck_beach.CausalExtractor",
        "dereck_beach.BayesianMechanismInference",
        "dereck_beach.CDAFFramework",
        "policy_processor.IndustrialPolicyProcessor",
        "policy_processor.BayesianEvidenceScorer",
        "policy_processor.PolicyTextProcessor",
        "policy_processor.ProcessorConfig",
        "embedding_policy.AdvancedSemanticChunker",
        "embedding_policy.BayesianNumericalAnalyzer",
        "embedding_policy.PolicyCrossEncoderReranker",
        "embedding_policy.PolicyAnalysisEmbedder",
        "embedding_policy.PolicyEmbeddingConfig",
        "embedding_policy.ChunkingConfig",
        "semantic_chunking_policy.SemanticProcessor",
        "semantic_chunking_policy.BayesianEvidenceIntegrator",
        "semantic_chunking_policy.PolicyDocumentAnalyzer",
        "semantic_chunking_policy.SemanticConfig",
        "teoria_cambio.TeoriaCambio",
        "teoria_cambio.AdvancedDAGValidator",
        "teoria_cambio.IndustrialGradeValidator",
        "teoria_cambio.GraphType",
        "contradiction_deteccion.PolicyContradictionDetector",
        "contradiction_deteccion.TemporalLogicVerifier",
        "contradiction_deteccion.BayesianConfidenceCalculator",
        "financiero_viabilidad_tablas.PDETMunicipalPlanAnalyzer",
        "financiero_viabilidad_tablas.ColombianMunicipalContext",
        "report_assembly.ReportAssembler",
        "report_assembly.MicroLevelAnswer",
        "report_assembly.MesoLevelCluster",
        "report_assembly.MacroLevelConvergence",
        "Analyzer_one.MunicipalAnalyzer",
        "Analyzer_one.MunicipalOntology",
        "Analyzer_one.SemanticAnalyzer",
        "Analyzer_one.PerformanceAnalyzer",
        "Analyzer_one.TextMiningEngine",
        "tempfile",
        "pathlib.Path",
        "tempfile",
        "pathlib.Path",
        "re",
        "decimal.Decimal"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T14:19:39.267243",
      "lines_of_code": 866,
      "orphan_reason": null,
      "relative_path": "choreographer.py",
      "sha256_hash": "686208ae9a45acc304018135e8e306e5f10dbcaaef2beeee0752e749ef123e63"
    },
    "contradiction_deteccion.py": {
      "classes": [
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 58,
          "line_start": 49,
          "methods": [],
          "name": "ContradictionType"
        },
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 68,
          "line_start": 61,
          "methods": [],
          "name": "PolicyDimension"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 83,
          "line_start": 72,
          "methods": [],
          "name": "PolicyStatement"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 101,
          "line_start": 87,
          "methods": [],
          "name": "ContradictionEvidence"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 139,
          "line_start": 104,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 110,
              "line_start": 107,
              "name": "__init__",
              "parameters": [
                "self"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 139,
              "line_start": 112,
              "name": "calculate_posterior",
              "parameters": [
                "self",
                "evidence_strength: float",
                "observations: int",
                "domain_weight: float"
              ],
              "return_annotation": "float"
            }
          ],
          "name": "BayesianConfidenceCalculator"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 278,
          "line_start": 142,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 151,
              "line_start": 145,
              "name": "__init__",
              "parameters": [
                "self"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 180,
              "line_start": 153,
              "name": "verify_temporal_consistency",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "Tuple[(bool, List[Dict[str, Any]])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 194,
              "line_start": 182,
              "name": "_build_timeline",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "List[Dict]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 211,
              "line_start": 196,
              "name": "_parse_temporal_marker",
              "parameters": [
                "self",
                "marker: str"
              ],
              "return_annotation": "Optional[int]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 222,
              "line_start": 213,
              "name": "_has_temporal_conflict",
              "parameters": [
                "self",
                "event_a: Dict",
                "event_b: Dict"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 234,
              "line_start": 224,
              "name": "_are_mutually_exclusive",
              "parameters": [
                "self",
                "stmt_a: PolicyStatement",
                "stmt_b: PolicyStatement"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 249,
              "line_start": 236,
              "name": "_extract_resources",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 266,
              "line_start": 251,
              "name": "_check_deadline_constraints",
              "parameters": [
                "self",
                "timeline: List[Dict]"
              ],
              "return_annotation": "List[Dict]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 271,
              "line_start": 268,
              "name": "_should_precede",
              "parameters": [
                "self",
                "stmt_a: PolicyStatement",
                "stmt_b: PolicyStatement"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 278,
              "line_start": 273,
              "name": "_classify_temporal_type",
              "parameters": [
                "self",
                "marker: str"
              ],
              "return_annotation": "str"
            }
          ],
          "name": "TemporalLogicVerifier"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1469,
          "line_start": 281,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 321,
              "line_start": 287,
              "name": "__init__",
              "parameters": [
                "self",
                "model_name: str",
                "spacy_model: str",
                "device: str"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 346,
              "line_start": 323,
              "name": "_initialize_pdm_patterns",
              "parameters": [
                "self"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 416,
              "line_start": 348,
              "name": "detect",
              "parameters": [
                "self",
                "text: str",
                "plan_name: str",
                "dimension: PolicyDimension"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 457,
              "line_start": 418,
              "name": "_extract_policy_statements",
              "parameters": [
                "self",
                "text: str",
                "dimension: PolicyDimension"
              ],
              "return_annotation": "List[PolicyStatement]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 484,
              "line_start": 459,
              "name": "_generate_embeddings",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "List[PolicyStatement]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 510,
              "line_start": 486,
              "name": "_build_knowledge_graph",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 554,
              "line_start": 512,
              "name": "_detect_semantic_contradictions",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "List[ContradictionEvidence]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 606,
              "line_start": 556,
              "name": "_detect_numerical_inconsistencies",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "List[ContradictionEvidence]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 650,
              "line_start": 608,
              "name": "_detect_temporal_conflicts",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "List[ContradictionEvidence]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 703,
              "line_start": 652,
              "name": "_detect_logical_incompatibilities",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "List[ContradictionEvidence]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 758,
              "line_start": 705,
              "name": "_detect_resource_conflicts",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "List[ContradictionEvidence]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 815,
              "line_start": 760,
              "name": "_calculate_coherence_metrics",
              "parameters": [
                "self",
                "contradictions: List[ContradictionEvidence]",
                "statements: List[PolicyStatement]",
                "text: str"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 843,
              "line_start": 817,
              "name": "_calculate_global_semantic_coherence",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 869,
              "line_start": 845,
              "name": "_calculate_objective_alignment",
              "parameters": [
                "self",
                "statements: List[PolicyStatement]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 883,
              "line_start": 871,
              "name": "_calculate_graph_fragmentation",
              "parameters": [
                "self"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 909,
              "line_start": 885,
              "name": "_calculate_contradiction_entropy",
              "parameters": [
                "self",
                "contradictions: List[ContradictionEvidence]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 938,
              "line_start": 911,
              "name": "_calculate_syntactic_complexity",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 947,
              "line_start": 940,
              "name": "_get_dependency_depth",
              "parameters": [
                "self",
                "token"
              ],
              "return_annotation": "int"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 970,
              "line_start": 949,
              "name": "_calculate_confidence_interval",
              "parameters": [
                "self",
                "score: float",
                "n_observations: int"
              ],
              "return_annotation": "Tuple[(float, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1044,
              "line_start": 972,
              "name": "_generate_resolution_recommendations",
              "parameters": [
                "self",
                "contradictions: List[ContradictionEvidence]"
              ],
              "return_annotation": "List[Dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1060,
              "line_start": 1046,
              "name": "_identify_affected_sections",
              "parameters": [
                "self",
                "conflicts: List[ContradictionEvidence]"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1085,
              "line_start": 1062,
              "name": "_serialize_contradiction",
              "parameters": [
                "self",
                "contradiction: ContradictionEvidence"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1100,
              "line_start": 1087,
              "name": "_get_graph_statistics",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1123,
              "line_start": 1104,
              "name": "_extract_temporal_markers",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1153,
              "line_start": 1125,
              "name": "_extract_quantitative_claims",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[Dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1162,
              "line_start": 1155,
              "name": "_parse_number",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1185,
              "line_start": 1164,
              "name": "_extract_resource_mentions",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[Tuple[(str, Optional[float])]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1204,
              "line_start": 1187,
              "name": "_determine_semantic_role",
              "parameters": [
                "self",
                "sent"
              ],
              "return_annotation": "Optional[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1227,
              "line_start": 1206,
              "name": "_identify_dependencies",
              "parameters": [
                "self",
                "sent",
                "doc"
              ],
              "return_annotation": "Set[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1233,
              "line_start": 1229,
              "name": "_get_context_window",
              "parameters": [
                "self",
                "text: str",
                "start: int",
                "end: int",
                "window_size: int"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1239,
              "line_start": 1235,
              "name": "_calculate_similarity",
              "parameters": [
                "self",
                "stmt_a: PolicyStatement",
                "stmt_b: PolicyStatement"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1252,
              "line_start": 1241,
              "name": "_classify_contradiction",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1264,
              "line_start": 1254,
              "name": "_get_domain_weight",
              "parameters": [
                "self",
                "dimension: PolicyDimension"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1295,
              "line_start": 1266,
              "name": "_suggest_resolutions",
              "parameters": [
                "self",
                "contradiction_type: ContradictionType"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1309,
              "line_start": 1297,
              "name": "_are_comparable_claims",
              "parameters": [
                "self",
                "claim_a: Dict",
                "claim_b: Dict"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1327,
              "line_start": 1311,
              "name": "_text_similarity",
              "parameters": [
                "self",
                "text_a: str",
                "text_b: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1347,
              "line_start": 1329,
              "name": "_calculate_numerical_divergence",
              "parameters": [
                "self",
                "claim_a: Dict",
                "claim_b: Dict"
              ],
              "return_annotation": "Optional[float]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1378,
              "line_start": 1349,
              "name": "_statistical_significance_test",
              "parameters": [
                "self",
                "claim_a: Dict",
                "claim_b: Dict"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1407,
              "line_start": 1380,
              "name": "_has_logical_conflict",
              "parameters": [
                "self",
                "stmt_a: PolicyStatement",
                "stmt_b: PolicyStatement"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1424,
              "line_start": 1409,
              "name": "_are_conflicting_allocations",
              "parameters": [
                "self",
                "amount_a: float",
                "amount_b: float",
                "total: float"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1446,
              "line_start": 1426,
              "name": "_determine_relation_type",
              "parameters": [
                "self",
                "stmt_a: PolicyStatement",
                "stmt_b: PolicyStatement"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1469,
              "line_start": 1448,
              "name": "_calculate_severity",
              "parameters": [
                "self",
                "stmt_a: PolicyStatement",
                "stmt_b: PolicyStatement"
              ],
              "return_annotation": "float"
            }
          ],
          "name": "PolicyContradictionDetector"
        }
      ],
      "content_hash": "4a08231c45b3659720ea18f53094bc2c",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/contradiction_deteccion.py",
      "functions": [],
      "imports": [
        "__future__.annotations",
        "hashlib",
        "logging",
        "re",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "enum.auto",
        "functools.lru_cache",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "typing.Protocol",
        "numpy",
        "pandas",
        "scipy.stats",
        "scipy.spatial.distance.cosine",
        "scipy.stats.beta",
        "scipy.stats.chi2_contingency",
        "scipy.stats.ks_2samp",
        "sklearn.feature_extraction.text.TfidfVectorizer",
        "sklearn.metrics.pairwise.cosine_similarity",
        "networkx",
        "sentence_transformers.SentenceTransformer",
        "sentence_transformers.util",
        "spacy",
        "transformers.pipeline",
        "transformers.AutoTokenizer",
        "transformers.AutoModelForSequenceClassification",
        "torch"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.745375",
      "lines_of_code": 1141,
      "orphan_reason": null,
      "relative_path": "contradiction_deteccion.py",
      "sha256_hash": "5aa9c26d9a02cbeb20a93ac54e5ee4b4682796c975d4ed4bb8c6a59c2d4e26cb"
    },
    "dereck_beach.py": {
      "classes": [
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 187,
          "line_start": 93,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 140,
              "line_start": 122,
              "name": "classify_test",
              "parameters": [
                "necessity: float",
                "sufficiency: float"
              ],
              "return_annotation": "TestType"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 187,
              "line_start": 143,
              "name": "apply_test_logic",
              "parameters": [
                "test_type: TestType",
                "evidence_found: bool",
                "prior: float",
                "bayes_factor: float"
              ],
              "return_annotation": "Tuple[(float, str)]"
            }
          ],
          "name": "BeachEvidentialTest"
        },
        {
          "bases": [
            "Exception"
          ],
          "has_docstring": true,
          "line_end": 223,
          "line_start": 194,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 203,
              "line_start": 197,
              "name": "__init__",
              "parameters": [
                "self",
                "message: str",
                "details: Optional[Dict[(str, Any)]]",
                "stage: Optional[str]",
                "recoverable: bool"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 213,
              "line_start": 205,
              "name": "_format_message",
              "parameters": [
                "self"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 223,
              "line_start": 215,
              "name": "to_dict",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            }
          ],
          "name": "CDAFException"
        },
        {
          "bases": [
            "CDAFException"
          ],
          "has_docstring": true,
          "line_end": 228,
          "line_start": 226,
          "methods": [],
          "name": "CDAFValidationError"
        },
        {
          "bases": [
            "CDAFException"
          ],
          "has_docstring": true,
          "line_end": 233,
          "line_start": 231,
          "methods": [],
          "name": "CDAFProcessingError"
        },
        {
          "bases": [
            "CDAFException"
          ],
          "has_docstring": true,
          "line_end": 238,
          "line_start": 236,
          "methods": [],
          "name": "CDAFBayesianError"
        },
        {
          "bases": [
            "CDAFException"
          ],
          "has_docstring": true,
          "line_end": 243,
          "line_start": 241,
          "methods": [],
          "name": "CDAFConfigError"
        },
        {
          "bases": [
            "BaseModel"
          ],
          "has_docstring": true,
          "line_end": 277,
          "line_start": 250,
          "methods": [],
          "name": "BayesianThresholdsConfig"
        },
        {
          "bases": [
            "BaseModel"
          ],
          "has_docstring": true,
          "line_end": 295,
          "line_start": 280,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 295,
              "line_start": 289,
              "name": "check_sum_to_one",
              "parameters": [
                "cls",
                "v",
                "values"
              ],
              "return_annotation": null
            }
          ],
          "name": "MechanismTypeConfig"
        },
        {
          "bases": [
            "BaseModel"
          ],
          "has_docstring": true,
          "line_end": 316,
          "line_start": 298,
          "methods": [],
          "name": "PerformanceConfig"
        },
        {
          "bases": [
            "BaseModel"
          ],
          "has_docstring": true,
          "line_end": 339,
          "line_start": 319,
          "methods": [],
          "name": "SelfReflectionConfig"
        },
        {
          "bases": [
            "BaseModel"
          ],
          "has_docstring": true,
          "line_end": 374,
          "line_start": 342,
          "methods": [],
          "name": "CDAFConfigSchema"
        },
        {
          "bases": [
            "NamedTuple"
          ],
          "has_docstring": true,
          "line_end": 382,
          "line_start": 377,
          "methods": [],
          "name": "GoalClassification"
        },
        {
          "bases": [
            "NamedTuple"
          ],
          "has_docstring": true,
          "line_end": 398,
          "line_start": 385,
          "methods": [],
          "name": "EntityActivity"
        },
        {
          "bases": [
            "TypedDict"
          ],
          "has_docstring": true,
          "line_end": 411,
          "line_start": 401,
          "methods": [],
          "name": "CausalLink"
        },
        {
          "bases": [
            "TypedDict"
          ],
          "has_docstring": true,
          "line_end": 419,
          "line_start": 414,
          "methods": [],
          "name": "AuditResult"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 441,
          "line_start": 423,
          "methods": [],
          "name": "MetaNode"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 846,
          "line_start": 444,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 456,
              "line_start": 447,
              "name": "__init__",
              "parameters": [
                "self",
                "config_path: Path"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 473,
              "line_start": 458,
              "name": "_load_config",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 560,
              "line_start": 475,
              "name": "_load_default_config",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 591,
              "line_start": 562,
              "name": "_validate_config",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 602,
              "line_start": 593,
              "name": "get",
              "parameters": [
                "self",
                "key: str",
                "default: Any"
              ],
              "return_annotation": "Any"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 608,
              "line_start": 604,
              "name": "get_bayesian_threshold",
              "parameters": [
                "self",
                "key: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 614,
              "line_start": 610,
              "name": "get_mechanism_prior",
              "parameters": [
                "self",
                "mechanism_type: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 620,
              "line_start": 616,
              "name": "get_performance_setting",
              "parameters": [
                "self",
                "key: str"
              ],
              "return_annotation": "Any"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 716,
              "line_start": 622,
              "name": "update_priors_from_feedback",
              "parameters": [
                "self",
                "feedback_data: Dict[(str, Any)]"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 779,
              "line_start": 718,
              "name": "_save_prior_history",
              "parameters": [
                "self",
                "feedback_data: Optional[Dict[(str, Any)]]",
                "uncertainty_reduction: Optional[float]"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 804,
              "line_start": 781,
              "name": "_load_uncertainty_history",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 846,
              "line_start": 806,
              "name": "check_uncertainty_reduction_criterion",
              "parameters": [
                "self",
                "current_uncertainty: float"
              ],
              "return_annotation": "Dict[(str, Any)]"
            }
          ],
          "name": "ConfigLoader"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 960,
          "line_start": 849,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 859,
              "line_start": 852,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader",
                "retry_handler"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 892,
              "line_start": 861,
              "name": "load_document",
              "parameters": [
                "self",
                "pdf_path: Path"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 910,
              "line_start": 894,
              "name": "extract_text",
              "parameters": [
                "self"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 941,
              "line_start": 912,
              "name": "extract_tables",
              "parameters": [
                "self"
              ],
              "return_annotation": "List[pd.DataFrame]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 960,
              "line_start": 943,
              "name": "extract_sections",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, str)]"
            }
          ],
          "name": "PDFProcessor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1578,
          "line_start": 963,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 972,
              "line_start": 966,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader",
                "nlp_model: spacy.Language"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 991,
              "line_start": 974,
              "name": "extract_causal_hierarchy",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "nx.DiGraph"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1013,
              "line_start": 993,
              "name": "_extract_goals",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[MetaNode]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1049,
              "line_start": 1015,
              "name": "_parse_goal_context",
              "parameters": [
                "self",
                "goal_id: str",
                "context: str"
              ],
              "return_annotation": "Optional[MetaNode]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1057,
              "line_start": 1051,
              "name": "_add_node_to_graph",
              "parameters": [
                "self",
                "node: MetaNode"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1192,
              "line_start": 1059,
              "name": "_extract_causal_links",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1230,
              "line_start": 1194,
              "name": "_calculate_semantic_distance",
              "parameters": [
                "self",
                "source: str",
                "target: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1253,
              "line_start": 1232,
              "name": "_calculate_type_transition_prior",
              "parameters": [
                "self",
                "source: str",
                "target: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1293,
              "line_start": 1255,
              "name": "_check_structural_violation",
              "parameters": [
                "self",
                "source: str",
                "target: str"
              ],
              "return_annotation": "Optional[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1403,
              "line_start": 1295,
              "name": "_calculate_language_specificity",
              "parameters": [
                "self",
                "keyword: str",
                "policy_area: Optional[str]",
                "context: Optional[str]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1434,
              "line_start": 1405,
              "name": "_assess_temporal_coherence",
              "parameters": [
                "self",
                "source: str",
                "target: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1458,
              "line_start": 1436,
              "name": "_assess_financial_consistency",
              "parameters": [
                "self",
                "source: str",
                "target: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1480,
              "line_start": 1460,
              "name": "_calculate_textual_proximity",
              "parameters": [
                "self",
                "source: str",
                "target: str",
                "text: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1498,
              "line_start": 1482,
              "name": "_initialize_prior",
              "parameters": [
                "self",
                "source: str",
                "target: str"
              ],
              "return_annotation": "Tuple[(float, float, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1557,
              "line_start": 1500,
              "name": "_calculate_composite_likelihood",
              "parameters": [
                "self",
                "evidence: Dict[(str, Any)]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1578,
              "line_start": 1559,
              "name": "_build_type_hierarchy",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "CausalExtractor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1631,
          "line_start": 1581,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1588,
              "line_start": 1584,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader",
                "nlp_model: spacy.Language"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1626,
              "line_start": 1590,
              "name": "extract_entity_activity",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "Optional[EntityActivity]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1631,
              "line_start": 1628,
              "name": "_normalize_entity",
              "parameters": [
                "self",
                "entity: str"
              ],
              "return_annotation": "str"
            }
          ],
          "name": "MechanismPartExtractor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1906,
          "line_start": 1634,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1644,
              "line_start": 1637,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1674,
              "line_start": 1646,
              "name": "trace_financial_allocation",
              "parameters": [
                "self",
                "tables: List[pd.DataFrame]",
                "nodes: Dict[(str, MetaNode)]",
                "graph: Optional[nx.DiGraph]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1745,
              "line_start": 1676,
              "name": "_process_financial_table",
              "parameters": [
                "self",
                "table: pd.DataFrame",
                "nodes: Dict[(str, MetaNode)]"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1760,
              "line_start": 1747,
              "name": "_parse_amount",
              "parameters": [
                "self",
                "value: Any"
              ],
              "return_annotation": "Optional[float]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1815,
              "line_start": 1762,
              "name": "_match_program_to_node",
              "parameters": [
                "self",
                "program_id: str",
                "nodes: Dict[(str, MetaNode)]"
              ],
              "return_annotation": "Optional[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1906,
              "line_start": 1817,
              "name": "_perform_counterfactual_budget_check",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "graph: nx.DiGraph"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "FinancialAuditor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 2506,
          "line_start": 1909,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1917,
              "line_start": 1912,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2047,
              "line_start": 1919,
              "name": "audit_evidence_traceability",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]"
              ],
              "return_annotation": "Dict[(str, AuditResult)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2087,
              "line_start": 2049,
              "name": "audit_sequence_logic",
              "parameters": [
                "self",
                "graph: nx.DiGraph"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2135,
              "line_start": 2089,
              "name": "bayesian_counterfactual_audit",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "graph: nx.DiGraph",
                "historical_data: Optional[Dict[(str, Any)]]",
                "pdet_alignment: Optional[float]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2158,
              "line_start": 2137,
              "name": "_build_normative_dag",
              "parameters": [
                "self"
              ],
              "return_annotation": "nx.DiGraph"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2174,
              "line_start": 2160,
              "name": "_get_default_historical_priors",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2276,
              "line_start": 2176,
              "name": "_audit_direct_evidence",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "scm_dag: nx.DiGraph",
                "historical_data: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Dict[str, Any])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2329,
              "line_start": 2278,
              "name": "_audit_causal_implications",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "graph: nx.DiGraph",
                "direct_evidence: Dict[(str, Dict[str, Any])]"
              ],
              "return_annotation": "Dict[(str, Dict[str, Any])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2447,
              "line_start": 2331,
              "name": "_audit_systemic_risk",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "graph: nx.DiGraph",
                "direct_evidence: Dict[(str, Dict[str, Any])]",
                "causal_implications: Dict[(str, Dict[str, Any])]",
                "pdet_alignment: Optional[float]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2495,
              "line_start": 2449,
              "name": "_generate_optimal_remediations",
              "parameters": [
                "self",
                "direct_evidence: Dict[(str, Dict[str, Any])]",
                "causal_implications: Dict[(str, Dict[str, Any])]",
                "systemic_risk: Dict[(str, Any)]"
              ],
              "return_annotation": "List[Dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2506,
              "line_start": 2497,
              "name": "_get_remediation_text",
              "parameters": [
                "self",
                "omission: str",
                "node_id: str"
              ],
              "return_annotation": "str"
            }
          ],
          "name": "OperationalizationAuditor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 3016,
          "line_start": 2509,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 2567,
              "line_start": 2528,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader",
                "nlp_model: spacy.Language"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2578,
              "line_start": 2569,
              "name": "_log_refactored_components",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2617,
              "line_start": 2580,
              "name": "infer_mechanisms",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "text: str"
              ],
              "return_annotation": "Dict[(str, Dict[str, Any])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2659,
              "line_start": 2619,
              "name": "_infer_single_mechanism",
              "parameters": [
                "self",
                "node: MetaNode",
                "text: str",
                "all_nodes: Dict[(str, MetaNode)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2701,
              "line_start": 2661,
              "name": "_extract_observations",
              "parameters": [
                "self",
                "node: MetaNode",
                "text: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2739,
              "line_start": 2703,
              "name": "_infer_mechanism_type",
              "parameters": [
                "self",
                "observations: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2767,
              "line_start": 2741,
              "name": "_infer_activity_sequence",
              "parameters": [
                "self",
                "observations: Dict[(str, Any)]",
                "mechanism_type_posterior: Dict[(str, float)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2808,
              "line_start": 2769,
              "name": "_calculate_coherence_factor",
              "parameters": [
                "self",
                "node: MetaNode",
                "observations: Dict[(str, Any)]",
                "all_nodes: Dict[(str, MetaNode)]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2836,
              "line_start": 2810,
              "name": "_test_sufficiency",
              "parameters": [
                "self",
                "node: MetaNode",
                "observations: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2920,
              "line_start": 2838,
              "name": "_test_necessity",
              "parameters": [
                "self",
                "node: MetaNode",
                "observations: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2939,
              "line_start": 2922,
              "name": "_generate_necessity_remediation",
              "parameters": [
                "self",
                "node_id: str",
                "missing_components: List[str]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2973,
              "line_start": 2941,
              "name": "_quantify_uncertainty",
              "parameters": [
                "self",
                "mechanism_type_posterior: Dict[(str, float)]",
                "sequence_posterior: Dict[(str, Any)]",
                "coherence_score: float"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3016,
              "line_start": 2975,
              "name": "_detect_gaps",
              "parameters": [
                "self",
                "node: MetaNode",
                "observations: Dict[(str, Any)]",
                "uncertainty: Dict[(str, float)]"
              ],
              "return_annotation": "List[Dict[(str, str)]]"
            }
          ],
          "name": "BayesianMechanismInference"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 3195,
          "line_start": 3019,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 3027,
              "line_start": 3022,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3038,
              "line_start": 3029,
              "name": "classify_goal_dynamics",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3097,
              "line_start": 3040,
              "name": "assign_probative_value",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3195,
              "line_start": 3099,
              "name": "identify_failure_points",
              "parameters": [
                "self",
                "graph: nx.DiGraph",
                "text: str"
              ],
              "return_annotation": "Set[str]"
            }
          ],
          "name": "CausalInferenceSetup"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 3499,
          "line_start": 3198,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 3205,
              "line_start": 3201,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ConfigLoader",
                "output_dir: Path"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3292,
              "line_start": 3207,
              "name": "generate_causal_diagram",
              "parameters": [
                "self",
                "graph: nx.DiGraph",
                "policy_code: str"
              ],
              "return_annotation": "Path"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3351,
              "line_start": 3294,
              "name": "generate_accountability_matrix",
              "parameters": [
                "self",
                "graph: nx.DiGraph",
                "policy_code: str"
              ],
              "return_annotation": "Path"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3441,
              "line_start": 3353,
              "name": "generate_confidence_report",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "graph: nx.DiGraph",
                "causal_chains: List[CausalLink]",
                "audit_results: Dict[(str, AuditResult)]",
                "financial_auditor: FinancialAuditor",
                "sequence_warnings: List[str]",
                "policy_code: str"
              ],
              "return_annotation": "Path"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3451,
              "line_start": 3443,
              "name": "_calculate_quality_score",
              "parameters": [
                "self",
                "traceability: float",
                "financial: float",
                "logic: float",
                "ea: float"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3499,
              "line_start": 3453,
              "name": "generate_causal_model_json",
              "parameters": [
                "self",
                "graph: nx.DiGraph",
                "nodes: Dict[(str, MetaNode)]",
                "policy_code: str"
              ],
              "return_annotation": "Path"
            }
          ],
          "name": "ReportingEngine"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 3967,
          "line_start": 3502,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 3574,
              "line_start": 3505,
              "name": "__init__",
              "parameters": [
                "self",
                "config_path: Path",
                "output_dir: Path",
                "log_level: str"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3685,
              "line_start": 3576,
              "name": "process_document",
              "parameters": [
                "self",
                "pdf_path: Path",
                "policy_code: str"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3783,
              "line_start": 3687,
              "name": "_extract_feedback_from_audit",
              "parameters": [
                "self",
                "inferred_mechanisms: Dict[(str, Dict[str, Any])]",
                "counterfactual_audit: Dict[(str, Any)]",
                "audit_results: Dict[(str, AuditResult)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3859,
              "line_start": 3785,
              "name": "_validate_dnp_compliance",
              "parameters": [
                "self",
                "nodes: Dict[(str, MetaNode)]",
                "graph: nx.DiGraph",
                "policy_code: str"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 3967,
              "line_start": 3861,
              "name": "_generate_dnp_report",
              "parameters": [
                "self",
                "dnp_results: List[Dict]",
                "policy_code: str"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "CDAFFramework"
        },
        {
          "bases": [],
          "has_docstring": false,
          "line_end": 374,
          "line_start": 373,
          "methods": [],
          "name": "Config"
        }
      ],
      "content_hash": "972824138c2c20d81f05eb0305bc6942",
      "dependencies": [
        "contradiction_deteccion.py",
        "financiero_viabilidad_tablas.py"
      ],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/dereck_beach.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 4047,
          "line_start": 3970,
          "name": "main",
          "parameters": [],
          "return_annotation": "int"
        }
      ],
      "imports": [
        "argparse",
        "json",
        "logging",
        "re",
        "sys",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "typing.TypedDict",
        "typing.NamedTuple",
        "typing.Literal",
        "typing.cast",
        "warnings",
        "fitz",
        "networkx",
        "numpy",
        "pandas",
        "spacy",
        "yaml",
        "fuzzywuzzy.fuzz",
        "fuzzywuzzy.process",
        "pydot.Dot",
        "pydot.Edge",
        "pydot.Node",
        "scipy.spatial.distance.cosine",
        "scipy.special.rel_entr",
        "scipy.stats",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.validator",
        "pydantic.ValidationError",
        "dnp_integration.ValidadorDNP",
        "dnp_integration.validar_plan_desarrollo_completo",
        "inference.bayesian_adapter.BayesianEngineAdapter",
        "contradiction_deteccion.PolicyContradictionDetectorV2",
        "financiero_viabilidad_tablas.ColombianMunicipalContext",
        "retry_handler.get_retry_handler",
        "retry_handler.DependencyType",
        "retry_handler.DependencyType"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.747163",
      "lines_of_code": 3054,
      "orphan_reason": null,
      "relative_path": "dereck_beach.py",
      "sha256_hash": "47d337199f1f849934aece4902201927da651dbc3467d590e1cd62dd8c8dfbf6"
    },
    "embedding_policy.py": {
      "classes": [
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 59,
          "line_start": 47,
          "methods": [],
          "name": "PolicyDomain"
        },
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 70,
          "line_start": 62,
          "methods": [],
          "name": "AnalyticalDimension"
        },
        {
          "bases": [
            "TypedDict"
          ],
          "has_docstring": true,
          "line_end": 80,
          "line_start": 73,
          "methods": [],
          "name": "PDQIdentifier"
        },
        {
          "bases": [
            "TypedDict"
          ],
          "has_docstring": true,
          "line_end": 92,
          "line_start": 83,
          "methods": [],
          "name": "SemanticChunk"
        },
        {
          "bases": [
            "TypedDict"
          ],
          "has_docstring": true,
          "line_end": 102,
          "line_start": 95,
          "methods": [],
          "name": "BayesianEvaluation"
        },
        {
          "bases": [
            "Protocol"
          ],
          "has_docstring": true,
          "line_end": 110,
          "line_start": 105,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 110,
              "line_start": 108,
              "name": "encode",
              "parameters": [
                "self",
                "texts: list[str]",
                "batch_size: int",
                "normalize: bool"
              ],
              "return_annotation": "NDArray[np.float32]"
            }
          ],
          "name": "EmbeddingProtocol"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 128,
          "line_start": 119,
          "methods": [],
          "name": "ChunkingConfig"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 405,
          "line_start": 131,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 156,
              "line_start": 154,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ChunkingConfig"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 224,
              "line_start": 158,
              "name": "chunk_document",
              "parameters": [
                "self",
                "text: str",
                "document_metadata: dict[(str, Any)]"
              ],
              "return_annotation": "list[SemanticChunk]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 231,
              "line_start": 226,
              "name": "_normalize_text",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 273,
              "line_start": 233,
              "name": "_recursive_split",
              "parameters": [
                "self",
                "text: str",
                "target_size: int",
                "overlap: int"
              ],
              "return_annotation": "list[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 284,
              "line_start": 275,
              "name": "_find_sentence_boundary",
              "parameters": [
                "self",
                "text: str",
                "start: int",
                "end: int"
              ],
              "return_annotation": "int | None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 297,
              "line_start": 286,
              "name": "_extract_sections",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "list[dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 314,
              "line_start": 302,
              "name": "_extract_tables",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "list[dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 321,
              "line_start": 316,
              "name": "_extract_lists",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "list[dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 382,
              "line_start": 323,
              "name": "_infer_pdq_context",
              "parameters": [
                "self",
                "chunk_text: str"
              ],
              "return_annotation": "PDQIdentifier | None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 391,
              "line_start": 384,
              "name": "_contains_table",
              "parameters": [
                "self",
                "chunk_text: str",
                "tables: list[dict[(str, Any)]]"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 395,
              "line_start": 393,
              "name": "_contains_list",
              "parameters": [
                "self",
                "chunk_text: str",
                "lists: list[dict[(str, Any)]]"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 405,
              "line_start": 397,
              "name": "_find_section",
              "parameters": [
                "self",
                "chunk_text: str",
                "sections: list[dict[(str, Any)]]"
              ],
              "return_annotation": "str | None"
            }
          ],
          "name": "AdvancedSemanticChunker"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 639,
          "line_start": 413,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 434,
              "line_start": 425,
              "name": "__init__",
              "parameters": [
                "self",
                "prior_strength: float"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 483,
              "line_start": 436,
              "name": "evaluate_policy_metric",
              "parameters": [
                "self",
                "observed_values: list[float]",
                "n_posterior_samples: int"
              ],
              "return_annotation": "BayesianEvaluation"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 510,
              "line_start": 485,
              "name": "_beta_binomial_posterior",
              "parameters": [
                "self",
                "observations: NDArray[np.float32]",
                "n_samples: int"
              ],
              "return_annotation": "NDArray[np.float32]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 543,
              "line_start": 512,
              "name": "_normal_normal_posterior",
              "parameters": [
                "self",
                "observations: NDArray[np.float32]",
                "n_samples: int"
              ],
              "return_annotation": "NDArray[np.float32]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 556,
              "line_start": 545,
              "name": "_classify_evidence_strength",
              "parameters": [
                "self",
                "credible_interval_width: float"
              ],
              "return_annotation": "Literal[('weak', 'moderate', 'strong', 'very_strong')]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 579,
              "line_start": 558,
              "name": "_compute_coherence",
              "parameters": [
                "self",
                "observations: NDArray[np.float32]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 589,
              "line_start": 581,
              "name": "_null_evaluation",
              "parameters": [
                "self"
              ],
              "return_annotation": "BayesianEvaluation"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 639,
              "line_start": 591,
              "name": "compare_policies",
              "parameters": [
                "self",
                "policy_a_values: list[float]",
                "policy_b_values: list[float]"
              ],
              "return_annotation": "dict[(str, Any)]"
            }
          ],
          "name": "BayesianNumericalAnalyzer"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 730,
          "line_start": 647,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 692,
              "line_start": 655,
              "name": "__init__",
              "parameters": [
                "self",
                "model_name: str",
                "max_length: int",
                "retry_handler"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 730,
              "line_start": 694,
              "name": "rerank",
              "parameters": [
                "self",
                "query: str",
                "candidates: list[SemanticChunk]",
                "top_k: int",
                "min_score: float"
              ],
              "return_annotation": "list[tuple[(SemanticChunk, float)]]"
            }
          ],
          "name": "PolicyCrossEncoderReranker"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 760,
          "line_start": 739,
          "methods": [],
          "name": "PolicyEmbeddingConfig"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1321,
          "line_start": 763,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 824,
              "line_start": 777,
              "name": "__init__",
              "parameters": [
                "self",
                "config: PolicyEmbeddingConfig",
                "retry_handler"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 872,
              "line_start": 826,
              "name": "process_document",
              "parameters": [
                "self",
                "document_text: str",
                "document_metadata: dict[(str, Any)]"
              ],
              "return_annotation": "list[SemanticChunk]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 942,
              "line_start": 874,
              "name": "semantic_search",
              "parameters": [
                "self",
                "query: str",
                "document_chunks: list[SemanticChunk]",
                "pdq_filter: PDQIdentifier | None",
                "use_reranking: bool"
              ],
              "return_annotation": "list[tuple[(SemanticChunk, float)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 994,
              "line_start": 944,
              "name": "evaluate_policy_numerical_consistency",
              "parameters": [
                "self",
                "chunks: list[SemanticChunk]",
                "pdq_context: PDQIdentifier"
              ],
              "return_annotation": "BayesianEvaluation"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1014,
              "line_start": 996,
              "name": "compare_policy_interventions",
              "parameters": [
                "self",
                "intervention_a_chunks: list[SemanticChunk]",
                "intervention_b_chunks: list[SemanticChunk]",
                "pdq_context: PDQIdentifier"
              ],
              "return_annotation": "dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1064,
              "line_start": 1016,
              "name": "generate_pdq_report",
              "parameters": [
                "self",
                "document_chunks: list[SemanticChunk]",
                "target_pdq: PDQIdentifier"
              ],
              "return_annotation": "dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1125,
              "line_start": 1070,
              "name": "_embed_texts",
              "parameters": [
                "self",
                "texts: list[str]"
              ],
              "return_annotation": "NDArray[np.float32]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1137,
              "line_start": 1127,
              "name": "_filter_by_pdq",
              "parameters": [
                "self",
                "chunks: list[SemanticChunk]",
                "pdq_filter: PDQIdentifier"
              ],
              "return_annotation": "list[SemanticChunk]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1191,
              "line_start": 1139,
              "name": "_apply_mmr",
              "parameters": [
                "self",
                "ranked_results: list[tuple[(SemanticChunk, float)]]"
              ],
              "return_annotation": "list[tuple[(SemanticChunk, float)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1246,
              "line_start": 1193,
              "name": "_extract_numerical_values",
              "parameters": [
                "self",
                "chunks: list[SemanticChunk]"
              ],
              "return_annotation": "list[float]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1254,
              "line_start": 1248,
              "name": "_generate_query_from_pdq",
              "parameters": [
                "self",
                "pdq: PDQIdentifier"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1294,
              "line_start": 1256,
              "name": "_compute_overall_confidence",
              "parameters": [
                "self",
                "relevant_chunks: list[tuple[(SemanticChunk, float)]]",
                "numerical_eval: BayesianEvaluation"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1303,
              "line_start": 1297,
              "name": "_cached_similarity",
              "parameters": [
                "self",
                "text_hash1: str",
                "text_hash2: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1321,
              "line_start": 1305,
              "name": "get_diagnostics",
              "parameters": [
                "self"
              ],
              "return_annotation": "dict[(str, Any)]"
            }
          ],
          "name": "PolicyAnalysisEmbedder"
        }
      ],
      "content_hash": "0768468d85b0cd82c7be1948864b4113",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/embedding_policy.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 1379,
          "line_start": 1329,
          "name": "create_policy_embedder",
          "parameters": [
            "model_tier: Literal[('fast', 'balanced', 'accurate')]"
          ],
          "return_annotation": "PolicyAnalysisEmbedder"
        },
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 1491,
          "line_start": 1387,
          "name": "example_pdm_analysis",
          "parameters": [],
          "return_annotation": null
        }
      ],
      "imports": [
        "__future__.annotations",
        "hashlib",
        "logging",
        "re",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "functools.lru_cache",
        "typing.Any",
        "typing.Literal",
        "typing.Protocol",
        "typing.TypedDict",
        "typing.Union",
        "numpy",
        "scipy.stats",
        "numpy.typing.NDArray",
        "sentence_transformers.CrossEncoder",
        "sentence_transformers.SentenceTransformer",
        "sklearn.metrics.pairwise.cosine_similarity",
        "logging",
        "retry_handler.DependencyType",
        "retry_handler.DependencyType",
        "retry_handler.DependencyType"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.747380",
      "lines_of_code": 1091,
      "orphan_reason": null,
      "relative_path": "embedding_policy.py",
      "sha256_hash": "ee0fa8fc6b80cd3141bf06231ec2126b36cadd542550a2ce560cbbc9000255b0"
    },
    "financiero_viabilidad_tablas.py": {
      "classes": [
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 163,
          "line_start": 72,
          "methods": [],
          "name": "ColombianMunicipalContext"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 178,
          "line_start": 171,
          "methods": [],
          "name": "CausalNode"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 190,
          "line_start": 182,
          "methods": [],
          "name": "CausalEdge"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 199,
          "line_start": 194,
          "methods": [],
          "name": "CausalDAG"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 214,
          "line_start": 203,
          "methods": [],
          "name": "CausalEffect"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 223,
          "line_start": 218,
          "methods": [],
          "name": "CounterfactualScenario"
        },
        {
          "bases": [],
          "has_docstring": false,
          "line_end": 234,
          "line_start": 227,
          "methods": [],
          "name": "ExtractedTable"
        },
        {
          "bases": [],
          "has_docstring": false,
          "line_end": 247,
          "line_start": 238,
          "methods": [],
          "name": "FinancialIndicator"
        },
        {
          "bases": [],
          "has_docstring": false,
          "line_end": 258,
          "line_start": 251,
          "methods": [],
          "name": "ResponsibleEntity"
        },
        {
          "bases": [],
          "has_docstring": false,
          "line_end": 271,
          "line_start": 262,
          "methods": [],
          "name": "QualityScore"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 2206,
          "line_start": 278,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 320,
              "line_start": 281,
              "name": "__init__",
              "parameters": [
                "self",
                "use_gpu: bool",
                "language: str",
                "confidence_threshold: float"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 328,
              "line_start": 322,
              "name": "_get_spanish_stopwords",
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": false,
              "is_async": true,
              "line_end": 400,
              "line_start": 334,
              "name": "extract_tables",
              "parameters": [
                "self",
                "pdf_path: str"
              ],
              "return_annotation": "List[ExtractedTable]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 418,
              "line_start": 402,
              "name": "_clean_dataframe",
              "parameters": [
                "self",
                "df: pd.DataFrame"
              ],
              "return_annotation": "pd.DataFrame"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 426,
              "line_start": 420,
              "name": "_is_likely_header",
              "parameters": [
                "self",
                "row: pd.Series"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 450,
              "line_start": 428,
              "name": "_deduplicate_tables",
              "parameters": [
                "self",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "List[ExtractedTable]"
            },
            {
              "has_docstring": false,
              "is_async": true,
              "line_end": 493,
              "line_start": 452,
              "name": "_reconstruct_fragmented_tables",
              "parameters": [
                "self",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "List[ExtractedTable]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 515,
              "line_start": 495,
              "name": "_classify_tables",
              "parameters": [
                "self",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "List[ExtractedTable]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 536,
              "line_start": 521,
              "name": "analyze_financial_feasibility",
              "parameters": [
                "self",
                "tables: List[ExtractedTable]",
                "text: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 583,
              "line_start": 538,
              "name": "_extract_financial_amounts",
              "parameters": [
                "self",
                "text: str",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "List[FinancialIndicator]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 600,
              "line_start": 585,
              "name": "_identify_funding_source",
              "parameters": [
                "self",
                "context: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 640,
              "line_start": 602,
              "name": "_extract_from_budget_table",
              "parameters": [
                "self",
                "df: pd.DataFrame"
              ],
              "return_annotation": "List[FinancialIndicator]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 661,
              "line_start": 642,
              "name": "_analyze_funding_sources",
              "parameters": [
                "self",
                "indicators: List[FinancialIndicator]",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 677,
              "line_start": 663,
              "name": "_assess_financial_sustainability",
              "parameters": [
                "self",
                "indicators: List[FinancialIndicator]",
                "funding_sources: Dict[(str, Any)]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 719,
              "line_start": 679,
              "name": "_bayesian_risk_inference",
              "parameters": [
                "self",
                "indicators: List[FinancialIndicator]",
                "funding_sources: Dict[(str, Any)]",
                "sustainability: float"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 731,
              "line_start": 721,
              "name": "_interpret_risk",
              "parameters": [
                "self",
                "risk: float"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 741,
              "line_start": 733,
              "name": "_indicator_to_dict",
              "parameters": [
                "self",
                "ind: FinancialIndicator"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 759,
              "line_start": 747,
              "name": "identify_responsible_entities",
              "parameters": [
                "self",
                "text: str",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "List[ResponsibleEntity]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 784,
              "line_start": 761,
              "name": "_extract_entities_ner",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[ResponsibleEntity]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 811,
              "line_start": 786,
              "name": "_extract_entities_syntax",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[ResponsibleEntity]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 824,
              "line_start": 813,
              "name": "_classify_entity_type",
              "parameters": [
                "self",
                "name: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 855,
              "line_start": 826,
              "name": "_extract_from_responsibility_tables",
              "parameters": [
                "self",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "List[ResponsibleEntity]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 889,
              "line_start": 857,
              "name": "_consolidate_entities",
              "parameters": [
                "self",
                "entities: List[ResponsibleEntity]"
              ],
              "return_annotation": "List[ResponsibleEntity]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 910,
              "line_start": 891,
              "name": "_score_entity_specificity",
              "parameters": [
                "self",
                "entities: List[ResponsibleEntity]",
                "full_text: str"
              ],
              "return_annotation": "List[ResponsibleEntity]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 956,
              "line_start": 916,
              "name": "construct_causal_dag",
              "parameters": [
                "self",
                "text: str",
                "tables: List[ExtractedTable]",
                "financial_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "CausalDAG"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1006,
              "line_start": 958,
              "name": "_identify_causal_nodes",
              "parameters": [
                "self",
                "text: str",
                "tables: List[ExtractedTable]",
                "financial_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, CausalNode)]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1024,
              "line_start": 1008,
              "name": "_find_semantic_mentions",
              "parameters": [
                "self",
                "text: str",
                "concept: str",
                "concept_embedding: np.ndarray"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1056,
              "line_start": 1026,
              "name": "_find_outcome_mentions",
              "parameters": [
                "self",
                "text: str",
                "outcome: str"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1087,
              "line_start": 1058,
              "name": "_find_mediator_mentions",
              "parameters": [
                "self",
                "text: str",
                "mediator: str"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1108,
              "line_start": 1089,
              "name": "_extract_budget_for_pillar",
              "parameters": [
                "self",
                "pillar: str",
                "text: str",
                "financial_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "Optional[Decimal]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1171,
              "line_start": 1110,
              "name": "_identify_causal_edges",
              "parameters": [
                "self",
                "text: str",
                "nodes: Dict[(str, CausalNode)]"
              ],
              "return_annotation": "List[CausalEdge]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1194,
              "line_start": 1173,
              "name": "_match_text_to_node",
              "parameters": [
                "self",
                "text: str",
                "nodes: Dict[(str, CausalNode)]"
              ],
              "return_annotation": "Optional[str]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1217,
              "line_start": 1196,
              "name": "_refine_edge_probabilities",
              "parameters": [
                "self",
                "edges: List[CausalEdge]",
                "text: str",
                "nodes: Dict[(str, CausalNode)]"
              ],
              "return_annotation": "List[CausalEdge]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1228,
              "line_start": 1219,
              "name": "_break_cycles",
              "parameters": [
                "self",
                "G: nx.DiGraph"
              ],
              "return_annotation": "nx.DiGraph"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1257,
              "line_start": 1234,
              "name": "estimate_causal_effects",
              "parameters": [
                "self",
                "dag: CausalDAG",
                "text: str",
                "financial_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "List[CausalEffect]"
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 1327,
              "line_start": 1259,
              "name": "_estimate_effect_bayesian",
              "parameters": [
                "self",
                "treatment: str",
                "outcome: str",
                "dag: CausalDAG",
                "financial_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "Optional[CausalEffect]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1347,
              "line_start": 1329,
              "name": "_get_prior_effect",
              "parameters": [
                "self",
                "treatment: str",
                "outcome: str"
              ],
              "return_annotation": "Tuple[(float, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1363,
              "line_start": 1349,
              "name": "_identify_confounders",
              "parameters": [
                "self",
                "treatment: str",
                "outcome: str",
                "dag: CausalDAG"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1431,
              "line_start": 1369,
              "name": "generate_counterfactuals",
              "parameters": [
                "self",
                "dag: CausalDAG",
                "causal_effects: List[CausalEffect]",
                "financial_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "List[CounterfactualScenario]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1497,
              "line_start": 1433,
              "name": "_simulate_intervention",
              "parameters": [
                "self",
                "intervention: Dict[(str, float)]",
                "dag: CausalDAG",
                "causal_effects: List[CausalEffect]",
                "description: str"
              ],
              "return_annotation": "CounterfactualScenario"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1522,
              "line_start": 1499,
              "name": "_generate_scenario_narrative",
              "parameters": [
                "self",
                "description: str",
                "intervention: Dict[(str, float)]",
                "predicted_outcomes: Dict[(str, Tuple[float, float, float])]",
                "probabilities: Dict[(str, float)]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1550,
              "line_start": 1529,
              "name": "sensitivity_analysis",
              "parameters": [
                "self",
                "causal_effects: List[CausalEffect]",
                "dag: CausalDAG"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1567,
              "line_start": 1552,
              "name": "_compute_e_value",
              "parameters": [
                "self",
                "effect: CausalEffect"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1586,
              "line_start": 1569,
              "name": "_compute_robustness_value",
              "parameters": [
                "self",
                "effect: CausalEffect",
                "dag: CausalDAG"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1598,
              "line_start": 1588,
              "name": "_interpret_sensitivity",
              "parameters": [
                "self",
                "e_value: float",
                "robustness: float"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1654,
              "line_start": 1605,
              "name": "calculate_quality_score",
              "parameters": [
                "self",
                "text: str",
                "tables: List[ExtractedTable]",
                "financial_analysis: Dict[(str, Any)]",
                "responsible_entities: List[ResponsibleEntity]",
                "causal_dag: CausalDAG",
                "causal_effects: List[CausalEffect]"
              ],
              "return_annotation": "QualityScore"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1675,
              "line_start": 1656,
              "name": "_score_financial_component",
              "parameters": [
                "self",
                "financial_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1713,
              "line_start": 1677,
              "name": "_score_indicators",
              "parameters": [
                "self",
                "tables: List[ExtractedTable]",
                "text: str"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1730,
              "line_start": 1715,
              "name": "_score_responsibility_clarity",
              "parameters": [
                "self",
                "entities: List[ResponsibleEntity]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1751,
              "line_start": 1732,
              "name": "_score_temporal_consistency",
              "parameters": [
                "self",
                "text: str",
                "tables: List[ExtractedTable]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1776,
              "line_start": 1753,
              "name": "_score_pdet_alignment",
              "parameters": [
                "self",
                "text: str",
                "tables: List[ExtractedTable]",
                "dag: CausalDAG"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1800,
              "line_start": 1778,
              "name": "_score_causal_coherence",
              "parameters": [
                "self",
                "dag: CausalDAG",
                "effects: List[CausalEffect]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1817,
              "line_start": 1802,
              "name": "_estimate_score_confidence",
              "parameters": [
                "self",
                "scores: np.ndarray",
                "weights: np.ndarray"
              ],
              "return_annotation": "Tuple[(float, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1839,
              "line_start": 1824,
              "name": "export_causal_network",
              "parameters": [
                "self",
                "dag: CausalDAG",
                "output_path: str"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1921,
              "line_start": 1841,
              "name": "generate_executive_report",
              "parameters": [
                "self",
                "analysis_results: Dict[(str, Any)]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1942,
              "line_start": 1923,
              "name": "_interpret_overall_quality",
              "parameters": [
                "self",
                "score: float"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2016,
              "line_start": 1944,
              "name": "_generate_recommendations",
              "parameters": [
                "self",
                "analysis_results: Dict[(str, Any)]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": true,
              "line_end": 2126,
              "line_start": 2022,
              "name": "analyze_municipal_plan",
              "parameters": [
                "self",
                "pdf_path: str",
                "output_dir: Optional[str]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2157,
              "line_start": 2128,
              "name": "_extract_full_text",
              "parameters": [
                "self",
                "pdf_path: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2168,
              "line_start": 2159,
              "name": "_entity_to_dict",
              "parameters": [
                "self",
                "entity: ResponsibleEntity"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2183,
              "line_start": 2170,
              "name": "_effect_to_dict",
              "parameters": [
                "self",
                "effect: CausalEffect"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2192,
              "line_start": 2185,
              "name": "_scenario_to_dict",
              "parameters": [
                "self",
                "scenario: CounterfactualScenario"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 2206,
              "line_start": 2194,
              "name": "_quality_to_dict",
              "parameters": [
                "self",
                "quality: QualityScore"
              ],
              "return_annotation": "Dict[(str, Any)]"
            }
          ],
          "name": "PDETMunicipalPlanAnalyzer"
        },
        {
          "bases": [
            "Exception"
          ],
          "has_docstring": true,
          "line_end": 2215,
          "line_start": 2213,
          "methods": [],
          "name": "PDETAnalysisException"
        }
      ],
      "content_hash": "c4585fd11f9aaaaaeaa9fe09249c07ed",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/financiero_viabilidad_tablas.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 2232,
          "line_start": 2218,
          "name": "validate_pdf_path",
          "parameters": [
            "pdf_path: str"
          ],
          "return_annotation": "Path"
        },
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 2247,
          "line_start": 2235,
          "name": "setup_logging",
          "parameters": [
            "log_level: str"
          ],
          "return_annotation": "None"
        },
        {
          "has_docstring": true,
          "is_async": true,
          "line_end": 2298,
          "line_start": 2254,
          "name": "main_example",
          "parameters": [],
          "return_annotation": null
        }
      ],
      "imports": [
        "__future__.annotations",
        "asyncio",
        "re",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Literal",
        "typing.Set",
        "pathlib.Path",
        "decimal.Decimal",
        "datetime.datetime",
        "warnings",
        "numpy",
        "scipy.stats",
        "scipy.optimize.minimize",
        "scipy.special.expit",
        "scipy.special.logit",
        "pandas",
        "camelot",
        "tabula",
        "pdfplumber",
        "fitz",
        "sentence_transformers.SentenceTransformer",
        "sentence_transformers.util",
        "spacy",
        "transformers.pipeline",
        "torch",
        "sklearn.feature_extraction.text.TfidfVectorizer",
        "sklearn.metrics.pairwise.cosine_similarity",
        "sklearn.cluster.DBSCAN",
        "sklearn.cluster.AgglomerativeClustering",
        "sklearn.preprocessing.StandardScaler",
        "pymc",
        "arviz",
        "pytensor.tensor",
        "networkx",
        "itertools.combinations",
        "itertools.permutations",
        "logging",
        "json"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.747673",
      "lines_of_code": 1781,
      "orphan_reason": null,
      "relative_path": "financiero_viabilidad_tablas.py",
      "sha256_hash": "0ee5276fb13b2f0eab3520d010a21fa7d723064e1a4e5ee9d4cb53a046eebf02"
    },
    "orchestrator.py": {
      "classes": [
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 78,
          "line_start": 65,
          "methods": [],
          "name": "QuestionSpec"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 89,
          "line_start": 82,
          "methods": [],
          "name": "ClusterDefinition"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 103,
          "line_start": 93,
          "methods": [],
          "name": "OrchestratorConfig"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 113,
          "line_start": 107,
          "methods": [],
          "name": "ExecutionPlan"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 126,
          "line_start": 117,
          "methods": [],
          "name": "OrchestratorResult"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 727,
          "line_start": 133,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 192,
              "line_start": 147,
              "name": "__init__",
              "parameters": [
                "self",
                "config: OrchestratorConfig"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 220,
              "line_start": 198,
              "name": "_load_questionnaire",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 269,
              "line_start": 222,
              "name": "_parse_all_questions",
              "parameters": [
                "self"
              ],
              "return_annotation": "List[QuestionSpec]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 315,
              "line_start": 271,
              "name": "_define_clusters",
              "parameters": [
                "self"
              ],
              "return_annotation": "List[ClusterDefinition]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 414,
              "line_start": 321,
              "name": "execute_chess_strategy",
              "parameters": [
                "self",
                "plan_document: str",
                "plan_metadata: Dict[(str, Any)]"
              ],
              "return_annotation": "OrchestratorResult"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 473,
              "line_start": 416,
              "name": "_execute_opening",
              "parameters": [
                "self",
                "plan_document: str",
                "plan_metadata: Dict[(str, Any)]"
              ],
              "return_annotation": "Dict[(str, MicroLevelAnswer)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 515,
              "line_start": 475,
              "name": "_execute_middle_game",
              "parameters": [
                "self",
                "micro_results: Dict[(str, MicroLevelAnswer)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 558,
              "line_start": 517,
              "name": "_generate_meso_clusters",
              "parameters": [
                "self",
                "micro_results: Dict[(str, MicroLevelAnswer)]"
              ],
              "return_annotation": "Dict[(str, MesoLevelCluster)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 589,
              "line_start": 560,
              "name": "_generate_macro_convergence",
              "parameters": [
                "self",
                "micro_results: Dict[(str, MicroLevelAnswer)]",
                "meso_results: Dict[(str, MesoLevelCluster)]"
              ],
              "return_annotation": "MacroLevelConvergence"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 663,
              "line_start": 595,
              "name": "save_results",
              "parameters": [
                "self",
                "result: OrchestratorResult"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 720,
              "line_start": 665,
              "name": "_generate_executive_summary",
              "parameters": [
                "self",
                "result: OrchestratorResult"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 727,
              "line_start": 722,
              "name": "_generate_execution_id",
              "parameters": [
                "self"
              ],
              "return_annotation": "str"
            }
          ],
          "name": "PolicyAnalysisOrchestrator"
        }
      ],
      "content_hash": "8b329a0efa6f73bd680aa2cabffa61a3",
      "dependencies": [
        "report_assembly.py",
        "choreographer.py"
      ],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/orchestrator.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 803,
          "line_start": 734,
          "name": "example_usage",
          "parameters": [],
          "return_annotation": null
        }
      ],
      "imports": [
        "json",
        "logging",
        "time",
        "asyncio",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "datetime.datetime",
        "collections.defaultdict",
        "statistics",
        "choreographer.ExecutionChoreographer",
        "choreographer.ExecutionResult",
        "choreographer.ExecutionContext",
        "report_assembly.ReportAssembler",
        "report_assembly.MicroLevelAnswer",
        "report_assembly.MesoLevelCluster",
        "report_assembly.MacroLevelConvergence",
        "hashlib"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T13:26:21.471000",
      "lines_of_code": 589,
      "orphan_reason": null,
      "relative_path": "orchestrator.py",
      "sha256_hash": "9994c40ce8f1324c6fce464f47d4a44100e63bc44f152b627c923152b16fcf15"
    },
    "policy_processor.py": {
      "classes": [
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 59,
          "line_start": 51,
          "methods": [],
          "name": "CausalDimension"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 254,
          "line_start": 215,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 245,
              "line_start": 239,
              "name": "from_legacy",
              "parameters": [
                "cls"
              ],
              "return_annotation": "ProcessorConfig"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 254,
              "line_start": 247,
              "name": "validate",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "ProcessorConfig"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 328,
          "line_start": 261,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 272,
              "line_start": 269,
              "name": "__init__",
              "parameters": [
                "self",
                "prior_confidence: float",
                "entropy_weight: float"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 312,
              "line_start": 274,
              "name": "compute_evidence_score",
              "parameters": [
                "self",
                "matches: List[str]",
                "total_corpus_size: int",
                "pattern_specificity: float"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 328,
              "line_start": 315,
              "name": "_calculate_shannon_entropy",
              "parameters": [
                "values: np.ndarray"
              ],
              "return_annotation": "float"
            }
          ],
          "name": "BayesianEvidenceScorer"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 396,
          "line_start": 335,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 346,
              "line_start": 341,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ProcessorConfig"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 350,
              "line_start": 348,
              "name": "normalize_unicode",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 376,
              "line_start": 352,
              "name": "segment_into_sentences",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 391,
              "line_start": 378,
              "name": "extract_contextual_window",
              "parameters": [
                "self",
                "text: str",
                "match_position: int",
                "window_size: int"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 396,
              "line_start": 394,
              "name": "compile_pattern",
              "parameters": [
                "self",
                "pattern_str: str"
              ],
              "return_annotation": "re.Pattern"
            }
          ],
          "name": "PolicyTextProcessor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 422,
          "line_start": 404,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 422,
              "line_start": 414,
              "name": "to_dict",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            }
          ],
          "name": "EvidenceBundle"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 787,
          "line_start": 425,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 460,
              "line_start": 434,
              "name": "__init__",
              "parameters": [
                "self",
                "config: Optional[ProcessorConfig]",
                "questionnaire_path: Optional[Path]"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 474,
              "line_start": 462,
              "name": "_load_questionnaire",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 485,
              "line_start": 476,
              "name": "_compile_pattern_registry",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(CausalDimension, Dict[str, List[re.Pattern]])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 514,
              "line_start": 487,
              "name": "_build_point_patterns",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 567,
              "line_start": 516,
              "name": "process",
              "parameters": [
                "self",
                "raw_text: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 591,
              "line_start": 569,
              "name": "_match_patterns_in_sentences",
              "parameters": [
                "self",
                "compiled_patterns: List",
                "relevant_sentences: List[str]"
              ],
              "return_annotation": "Tuple[(List[str], List[int])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 610,
              "line_start": 593,
              "name": "_compute_evidence_confidence",
              "parameters": [
                "self",
                "matches: List[str]",
                "text_length: int",
                "pattern_specificity: float"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 640,
              "line_start": 612,
              "name": "_construct_evidence_bundle",
              "parameters": [
                "self",
                "dimension: CausalDimension",
                "category: str",
                "matches: List[str]",
                "positions: List[int]",
                "confidence: float"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 679,
              "line_start": 642,
              "name": "_extract_point_evidence",
              "parameters": [
                "self",
                "text: str",
                "sentences: List[str]",
                "point_code: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 718,
              "line_start": 681,
              "name": "_analyze_causal_dimensions",
              "parameters": [
                "self",
                "text: str",
                "sentences: List[str]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 749,
              "line_start": 721,
              "name": "_extract_metadata",
              "parameters": [
                "text: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 759,
              "line_start": 752,
              "name": "_compute_avg_confidence",
              "parameters": [
                "dimension_analysis: Dict[(str, Any)]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 775,
              "line_start": 761,
              "name": "_empty_result",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 787,
              "line_start": 777,
              "name": "export_results",
              "parameters": [
                "self",
                "results: Dict[(str, Any)]",
                "output_path: Union[(str, Path)]"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "IndustrialPolicyProcessor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 883,
          "line_start": 794,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 807,
              "line_start": 800,
              "name": "__init__",
              "parameters": [
                "self",
                "config: ProcessorConfig"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 844,
              "line_start": 809,
              "name": "sanitize",
              "parameters": [
                "self",
                "raw_text: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 875,
              "line_start": 846,
              "name": "_protect_structure",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 883,
              "line_start": 877,
              "name": "_restore_structure",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "str"
            }
          ],
          "name": "AdvancedTextSanitizer"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 941,
          "line_start": 890,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 930,
              "line_start": 899,
              "name": "read_text",
              "parameters": [
                "cls",
                "file_path: Union[(str, Path)]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 941,
              "line_start": 933,
              "name": "write_text",
              "parameters": [
                "cls",
                "content: str",
                "file_path: Union[(str, Path)]"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "ResilientFileHandler"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1018,
          "line_start": 948,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 962,
              "line_start": 954,
              "name": "__init__",
              "parameters": [
                "self",
                "config: Optional[ProcessorConfig]",
                "questionnaire_path: Optional[Path]"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1005,
              "line_start": 964,
              "name": "analyze_file",
              "parameters": [
                "self",
                "input_path: Union[(str, Path)]",
                "output_path: Optional[Union[(str, Path)]]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1018,
              "line_start": 1007,
              "name": "analyze_text",
              "parameters": [
                "self",
                "raw_text: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            }
          ],
          "name": "PolicyAnalysisPipeline"
        }
      ],
      "content_hash": "b4a21a0a11ba5468377696a48b4da412",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/policy_processor.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 1049,
          "line_start": 1025,
          "name": "create_policy_processor",
          "parameters": [
            "preserve_structure: bool",
            "enable_semantic_tagging: bool",
            "confidence_threshold: float"
          ],
          "return_annotation": "PolicyAnalysisPipeline"
        },
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 1115,
          "line_start": 1056,
          "name": "main",
          "parameters": [],
          "return_annotation": null
        }
      ],
      "imports": [
        "json",
        "logging",
        "re",
        "unicodedata",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "pathlib.Path",
        "typing.Any",
        "typing.ClassVar",
        "typing.Dict",
        "typing.FrozenSet",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "numpy",
        "functools.lru_cache",
        "itertools.chain",
        "argparse"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.747861",
      "lines_of_code": 860,
      "orphan_reason": null,
      "relative_path": "policy_processor.py",
      "sha256_hash": "ba03a956601333579cd35db787817f46c3846c417cbf479688f8f7b1aca1d7c4"
    },
    "report_assembly.py": {
      "classes": [
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 66,
          "line_start": 41,
          "methods": [],
          "name": "MicroLevelAnswer"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 89,
          "line_start": 70,
          "methods": [],
          "name": "MesoLevelCluster"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 114,
          "line_start": 93,
          "methods": [],
          "name": "MacroLevelConvergence"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 1694,
          "line_start": 121,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 162,
              "line_start": 131,
              "name": "__init__",
              "parameters": [
                "self",
                "dimension_descriptions: Optional[Dict[(str, str)]]"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 270,
              "line_start": 168,
              "name": "generate_micro_answer",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "MicroLevelAnswer"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 337,
              "line_start": 272,
              "name": "_apply_scoring_modality",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool], Dict[str, Any])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 396,
              "line_start": 339,
              "name": "_score_type_a",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 434,
              "line_start": 398,
              "name": "_score_type_b",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 463,
              "line_start": 436,
              "name": "_score_type_c",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 499,
              "line_start": 465,
              "name": "_score_type_d",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 570,
              "line_start": 501,
              "name": "_score_type_e",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 650,
              "line_start": 572,
              "name": "_score_type_f",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 714,
              "line_start": 652,
              "name": "_evaluate_condition",
              "parameters": [
                "self",
                "condition: Dict[(str, Any)]",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 738,
              "line_start": 716,
              "name": "_score_default",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]"
              ],
              "return_annotation": "Tuple[(float, Dict[str, bool])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 753,
              "line_start": 740,
              "name": "_extract_numerical_value",
              "parameters": [
                "self",
                "metric: str",
                "execution_results: Dict[(str, Any)]"
              ],
              "return_annotation": "Optional[float]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 768,
              "line_start": 755,
              "name": "_extract_pattern_matches",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "plan_text: str"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 779,
              "line_start": 770,
              "name": "_score_to_qualitative_question",
              "parameters": [
                "self",
                "score: float"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 814,
              "line_start": 781,
              "name": "_extract_evidence_excerpts",
              "parameters": [
                "self",
                "question_spec",
                "execution_results: Dict[(str, Any)]",
                "elements_found: Dict[(str, bool)]",
                "plan_text: str",
                "max_excerpts: int"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 841,
              "line_start": 816,
              "name": "_find_context_around",
              "parameters": [
                "self",
                "keyword: str",
                "text: str",
                "context_chars: int"
              ],
              "return_annotation": "Optional[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 877,
              "line_start": 843,
              "name": "_calculate_confidence",
              "parameters": [
                "self",
                "execution_results: Dict[(str, Any)]",
                "elements_found: Dict[(str, bool)]",
                "pattern_matches: Dict[(str, Any)]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 964,
              "line_start": 879,
              "name": "_generate_explanation",
              "parameters": [
                "self",
                "question_spec",
                "score: float",
                "qualitative: str",
                "elements_found: Dict[(str, bool)]",
                "execution_results: Dict[(str, Any)]",
                "evidence: List[str]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 975,
              "line_start": 966,
              "name": "_summarize_module_data",
              "parameters": [
                "self",
                "result: Dict[(str, Any)]"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1053,
              "line_start": 981,
              "name": "generate_meso_cluster",
              "parameters": [
                "self",
                "cluster_name: str",
                "cluster_description: str",
                "micro_answers: List[MicroLevelAnswer]",
                "cluster_definition: Dict[(str, Any)]"
              ],
              "return_annotation": "MesoLevelCluster"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1072,
              "line_start": 1055,
              "name": "_calculate_dimension_scores",
              "parameters": [
                "self",
                "micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1114,
              "line_start": 1074,
              "name": "_identify_strengths",
              "parameters": [
                "self",
                "micro_answers: List[MicroLevelAnswer]",
                "dimension_scores: Dict[(str, float)]"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1158,
              "line_start": 1116,
              "name": "_identify_weaknesses",
              "parameters": [
                "self",
                "micro_answers: List[MicroLevelAnswer]",
                "dimension_scores: Dict[(str, float)]"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1209,
              "line_start": 1160,
              "name": "_generate_cluster_recommendations",
              "parameters": [
                "self",
                "cluster_name: str",
                "micro_answers: List[MicroLevelAnswer]",
                "strengths: List[str]",
                "weaknesses: List[str]"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1226,
              "line_start": 1211,
              "name": "_assess_evidence_quality",
              "parameters": [
                "self",
                "micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1236,
              "line_start": 1228,
              "name": "_calculate_score_distribution",
              "parameters": [
                "self",
                "micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, int)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1339,
              "line_start": 1242,
              "name": "generate_macro_convergence",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]",
                "all_meso_clusters: List[MesoLevelCluster]",
                "plan_metadata: Dict[(str, Any)]"
              ],
              "return_annotation": "MacroLevelConvergence"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1357,
              "line_start": 1341,
              "name": "_calculate_dimension_convergence",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1375,
              "line_start": 1359,
              "name": "_calculate_policy_area_convergence",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1432,
              "line_start": 1377,
              "name": "_perform_gap_analysis",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]",
                "dim_convergence: Dict[(str, float)]",
                "policy_convergence: Dict[(str, float)]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1470,
              "line_start": 1434,
              "name": "_calculate_agenda_alignment",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]",
                "plan_metadata: Dict[(str, Any)]"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1502,
              "line_start": 1472,
              "name": "_identify_critical_gaps",
              "parameters": [
                "self",
                "gap_analysis: Dict[(str, Any)]",
                "dim_convergence: Dict[(str, float)]"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1563,
              "line_start": 1504,
              "name": "_generate_strategic_recommendations",
              "parameters": [
                "self",
                "overall_score: float",
                "dim_convergence: Dict[(str, float)]",
                "critical_gaps: List[str]",
                "meso_clusters: List[MesoLevelCluster]"
              ],
              "return_annotation": "List[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1570,
              "line_start": 1565,
              "name": "_classify_plan",
              "parameters": [
                "self",
                "overall_score: float"
              ],
              "return_annotation": "str"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1592,
              "line_start": 1572,
              "name": "_synthesize_evidence",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1631,
              "line_start": 1594,
              "name": "_generate_implementation_roadmap",
              "parameters": [
                "self",
                "critical_gaps: List[str]",
                "strategic_recommendations: List[str]"
              ],
              "return_annotation": "List[Dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1641,
              "line_start": 1633,
              "name": "_calculate_overall_distribution",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, int)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1655,
              "line_start": 1643,
              "name": "_calculate_confidence_metrics",
              "parameters": [
                "self",
                "all_micro_answers: List[MicroLevelAnswer]"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 1694,
              "line_start": 1661,
              "name": "export_report",
              "parameters": [
                "self",
                "micro_answers: List[MicroLevelAnswer]",
                "meso_clusters: List[MesoLevelCluster]",
                "macro_convergence: MacroLevelConvergence",
                "output_path: Path"
              ],
              "return_annotation": null
            }
          ],
          "name": "ReportAssembler"
        }
      ],
      "content_hash": "d1b6daedee439ce1cfe9a74ae346609d",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/report_assembly.py",
      "functions": [],
      "imports": [
        "json",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "collections.defaultdict",
        "statistics",
        "re",
        "datetime.datetime"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.748035",
      "lines_of_code": 1317,
      "orphan_reason": null,
      "relative_path": "report_assembly.py",
      "sha256_hash": "b674916d8db0fc51d5b2c78835267c896af7a49a980941b981ce92b52affa1d4"
    },
    "semantic_chunking_policy.py": {
      "classes": [
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 64,
          "line_start": 57,
          "methods": [],
          "name": "CausalDimension"
        },
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 78,
          "line_start": 67,
          "methods": [],
          "name": "PDMSection"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 93,
          "line_start": 82,
          "methods": [],
          "name": "SemanticConfig"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 253,
          "line_start": 101,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 113,
              "line_start": 109,
              "name": "__init__",
              "parameters": [
                "self",
                "config: SemanticConfig"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 140,
              "line_start": 115,
              "name": "_lazy_load",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 178,
              "line_start": 142,
              "name": "chunk_text",
              "parameters": [
                "self",
                "text: str",
                "preserve_structure: bool"
              ],
              "return_annotation": "list[dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 205,
              "line_start": 180,
              "name": "_detect_pdm_structure",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "list[dict[(str, Any)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 212,
              "line_start": 207,
              "name": "_detect_table",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 222,
              "line_start": 214,
              "name": "_detect_numerical_data",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 249,
              "line_start": 224,
              "name": "_embed_batch",
              "parameters": [
                "self",
                "texts: list[str]"
              ],
              "return_annotation": "list[NDArray[np.floating[Any]]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 253,
              "line_start": 251,
              "name": "embed_single",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "NDArray[np.floating[Any]]"
            }
          ],
          "name": "SemanticProcessor"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 411,
          "line_start": 261,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 283,
              "line_start": 270,
              "name": "__init__",
              "parameters": [
                "self",
                "prior_concentration: float"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 338,
              "line_start": 285,
              "name": "integrate_evidence",
              "parameters": [
                "self",
                "similarities: NDArray[np.float64]",
                "chunk_metadata: list[dict[(str, Any)]]"
              ],
              "return_annotation": "dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 348,
              "line_start": 340,
              "name": "_similarity_to_probability",
              "parameters": [
                "self",
                "sims: NDArray[np.float64]"
              ],
              "return_annotation": "NDArray[np.float64]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 376,
              "line_start": 350,
              "name": "_compute_reliability_weights",
              "parameters": [
                "self",
                "metadata: list[dict[(str, Any)]]"
              ],
              "return_annotation": "NDArray[np.float64]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 390,
              "line_start": 378,
              "name": "_null_evidence",
              "parameters": [
                "self"
              ],
              "return_annotation": "dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 411,
              "line_start": 392,
              "name": "causal_strength",
              "parameters": [
                "self",
                "cause_emb: NDArray[np.floating[Any]]",
                "effect_emb: NDArray[np.floating[Any]]",
                "context_emb: NDArray[np.floating[Any]]"
              ],
              "return_annotation": "float"
            }
          ],
          "name": "BayesianEvidenceIntegrator"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 538,
          "line_start": 419,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 435,
              "line_start": 428,
              "name": "__init__",
              "parameters": [
                "self",
                "config: SemanticConfig | None"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 471,
              "line_start": 437,
              "name": "_init_dimension_embeddings",
              "parameters": [
                "self"
              ],
              "return_annotation": "dict[(CausalDimension, NDArray[np.floating[Any]])]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 516,
              "line_start": 473,
              "name": "analyze",
              "parameters": [
                "self",
                "text: str"
              ],
              "return_annotation": "dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 538,
              "line_start": 518,
              "name": "_extract_key_excerpts",
              "parameters": [
                "self",
                "chunks: list[dict[(str, Any)]]",
                "dimension_results: dict[(str, dict[str, Any])]"
              ],
              "return_annotation": "dict[(str, list[str])]"
            }
          ],
          "name": "PolicyDocumentAnalyzer"
        }
      ],
      "content_hash": "c3ecc48967eeff77576e44e14b3b9a20",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/semantic_chunking_policy.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 583,
          "line_start": 546,
          "name": "main",
          "parameters": [],
          "return_annotation": null
        }
      ],
      "imports": [
        "__future__.annotations",
        "re",
        "torch",
        "transformers.AutoTokenizer",
        "transformers.AutoModel",
        "logging",
        "json",
        "dataclasses.dataclass",
        "enum.Enum",
        "typing.Any",
        "typing.Literal",
        "numpy",
        "numpy.typing.NDArray",
        "scipy.stats",
        "scipy.spatial.distance.cosine",
        "scipy.special.rel_entr"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.748182",
      "lines_of_code": 481,
      "orphan_reason": null,
      "relative_path": "semantic_chunking_policy.py",
      "sha256_hash": "37633fef2e87f2ef155b0db0e8d27d353ee4ff4dc9680a0ca98ad5c07d331647"
    },
    "teoria_cambio.py": {
      "classes": [
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 99,
          "line_start": 89,
          "methods": [],
          "name": "CategoriaCausal"
        },
        {
          "bases": [
            "Enum"
          ],
          "has_docstring": true,
          "line_end": 108,
          "line_start": 102,
          "methods": [],
          "name": "GraphType"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 119,
          "line_start": 112,
          "methods": [],
          "name": "ValidacionResultado"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 131,
          "line_start": 123,
          "methods": [],
          "name": "ValidationMetric"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 146,
          "line_start": 135,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 146,
              "line_start": 143,
              "name": "__post_init__",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            }
          ],
          "name": "AdvancedGraphNode"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 176,
          "line_start": 150,
          "methods": [],
          "name": "MonteCarloAdvancedResult"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 314,
          "line_start": 184,
          "methods": [
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 204,
              "line_start": 200,
              "name": "__init__",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 209,
              "line_start": 207,
              "name": "_es_conexion_valida",
              "parameters": [
                "origen: CategoriaCausal",
                "destino: CategoriaCausal"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 233,
              "line_start": 212,
              "name": "construir_grafo_causal",
              "parameters": [
                "self"
              ],
              "return_annotation": "nx.DiGraph"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 248,
              "line_start": 235,
              "name": "validacion_completa",
              "parameters": [
                "self",
                "grafo: nx.DiGraph"
              ],
              "return_annotation": "ValidacionResultado"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 257,
              "line_start": 251,
              "name": "_extraer_categorias",
              "parameters": [
                "grafo: nx.DiGraph"
              ],
              "return_annotation": "Set[str]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 268,
              "line_start": 260,
              "name": "_validar_orden_causal",
              "parameters": [
                "grafo: nx.DiGraph"
              ],
              "return_annotation": "List[Tuple[(str, str)]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 292,
              "line_start": 271,
              "name": "_encontrar_caminos_completos",
              "parameters": [
                "grafo: nx.DiGraph"
              ],
              "return_annotation": "List[List[str]]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 314,
              "line_start": 295,
              "name": "_generar_sugerencias_internas",
              "parameters": [
                "validacion: ValidacionResultado"
              ],
              "return_annotation": "List[str]"
            }
          ],
          "name": "TeoriaCambio"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 639,
          "line_start": 353,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 369,
              "line_start": 360,
              "name": "__init__",
              "parameters": [
                "self",
                "graph_type: GraphType"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 381,
              "line_start": 371,
              "name": "add_node",
              "parameters": [
                "self",
                "name: str",
                "dependencies: Optional[Set[str]]",
                "role: str",
                "metadata: Optional[Dict[(str, Any)]]"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 390,
              "line_start": 383,
              "name": "add_edge",
              "parameters": [
                "self",
                "from_node: str",
                "to_node: str",
                "weight: float"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 416,
              "line_start": 392,
              "name": "_initialize_rng",
              "parameters": [
                "self",
                "plan_name: str",
                "salt: str"
              ],
              "return_annotation": "int"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 440,
              "line_start": 419,
              "name": "_is_acyclic",
              "parameters": [
                "nodes: Dict[(str, AdvancedGraphNode)]"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 460,
              "line_start": 442,
              "name": "_generate_subgraph",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, AdvancedGraphNode)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 507,
              "line_start": 462,
              "name": "calculate_acyclicity_pvalue",
              "parameters": [
                "self",
                "plan_name: str",
                "iterations: int"
              ],
              "return_annotation": "MonteCarloAdvancedResult"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 549,
              "line_start": 509,
              "name": "_perform_sensitivity_analysis_internal",
              "parameters": [
                "self",
                "plan_name: str",
                "base_p_value: float",
                "iterations: int"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 563,
              "line_start": 552,
              "name": "_calculate_confidence_interval",
              "parameters": [
                "s: int",
                "n: int",
                "conf: float"
              ],
              "return_annotation": "Tuple[(float, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 574,
              "line_start": 566,
              "name": "_calculate_statistical_power",
              "parameters": [
                "s: int",
                "n: int",
                "alpha: float"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 583,
              "line_start": 577,
              "name": "_calculate_bayesian_posterior",
              "parameters": [
                "likelihood: float",
                "prior: float"
              ],
              "return_annotation": "float"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 604,
              "line_start": 585,
              "name": "_calculate_node_importance",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, float)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 614,
              "line_start": 606,
              "name": "get_graph_stats",
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[(str, Any)]"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 639,
              "line_start": 616,
              "name": "_create_empty_result",
              "parameters": [
                "self",
                "plan_name: str",
                "seed: int",
                "timestamp: str"
              ],
              "return_annotation": "MonteCarloAdvancedResult"
            }
          ],
          "name": "AdvancedDAGValidator"
        },
        {
          "bases": [],
          "has_docstring": true,
          "line_end": 798,
          "line_start": 647,
          "methods": [
            {
              "has_docstring": false,
              "is_async": false,
              "line_end": 660,
              "line_start": 652,
              "name": "__init__",
              "parameters": [
                "self"
              ],
              "return_annotation": "None"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 692,
              "line_start": 662,
              "name": "execute_suite",
              "parameters": [
                "self"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 711,
              "line_start": 694,
              "name": "validate_engine_readiness",
              "parameters": [
                "self"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 728,
              "line_start": 713,
              "name": "validate_causal_categories",
              "parameters": [
                "self"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 748,
              "line_start": 730,
              "name": "validate_connection_matrix",
              "parameters": [
                "self"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 777,
              "line_start": 750,
              "name": "run_performance_benchmarks",
              "parameters": [
                "self"
              ],
              "return_annotation": "bool"
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 787,
              "line_start": 779,
              "name": "_benchmark_operation",
              "parameters": [
                "self",
                "operation_name: str",
                "callable_obj",
                "threshold: float"
              ],
              "return_annotation": null
            },
            {
              "has_docstring": true,
              "is_async": false,
              "line_end": 798,
              "line_start": 789,
              "name": "_log_metric",
              "parameters": [
                "self",
                "name: str",
                "value: float",
                "unit: str",
                "threshold: float"
              ],
              "return_annotation": null
            }
          ],
          "name": "IndustrialGradeValidator"
        }
      ],
      "content_hash": "7a20c8ea92f8454e5f9cf411eef2e8cc",
      "dependencies": [],
      "file_path": "/Users/recovered/PycharmProjects/SAAAAAA/teoria_cambio.py",
      "functions": [
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 74,
          "line_start": 67,
          "name": "configure_logging",
          "parameters": [],
          "return_annotation": "None"
        },
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 350,
          "line_start": 322,
          "name": "_create_advanced_seed",
          "parameters": [
            "plan_name: str",
            "salt: str"
          ],
          "return_annotation": "int"
        },
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 838,
          "line_start": 806,
          "name": "create_policy_theory_of_change_graph",
          "parameters": [],
          "return_annotation": "AdvancedDAGValidator"
        },
        {
          "has_docstring": true,
          "is_async": false,
          "line_end": 905,
          "line_start": 841,
          "name": "main",
          "parameters": [],
          "return_annotation": "None"
        }
      ],
      "imports": [
        "argparse",
        "hashlib",
        "logging",
        "random",
        "sys",
        "time",
        "collections.defaultdict",
        "collections.deque",
        "dataclasses.asdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "functools.lru_cache",
        "typing.Any",
        "typing.Dict",
        "typing.FrozenSet",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Type",
        "networkx",
        "numpy",
        "scipy.stats"
      ],
      "is_orphan": false,
      "last_modified": "2025-10-22T11:08:33.748353",
      "lines_of_code": 751,
      "orphan_reason": null,
      "relative_path": "teoria_cambio.py",
      "sha256_hash": "a3c79520adca6f0c86d01d65a91cd8c1be92fdf0e943f99eff7ec40ceb19e66d"
    }
  },
  "generated_at": "2025-10-22T19:54:44.569956Z",
  "orphaned_files": 0,
  "total_files": 11,
  "total_loc": 12950,
  "workspace_root": "/Users/recovered/PycharmProjects/SAAAAAA"
}