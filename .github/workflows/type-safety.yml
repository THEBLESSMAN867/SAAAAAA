name: Type Safety & Contract Validation

on:
  pull_request:
  push:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  type-check:
    name: Strict Type Checking
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy pyright ruff hypothesis pytest
          # Install minimal runtime dependencies
          pip install jsonschema || true
      
      - name: Run Ruff linter
        run: |
          echo "=== Running Ruff linter ==="
          ruff check . --config pyproject.toml || echo "Ruff found issues (non-blocking for now)"
      
      - name: Run MyPy type checker (core modules)
        run: |
          echo "=== Running MyPy strict type checking on core modules ==="
          mypy --config-file pyproject.toml \
            contracts.py \
            orchestrator.py \
            document_ingestion.py \
            embedding_policy.py \
            semantic_chunking_policy.py \
            || echo "MyPy found issues - will be enforced after transition period"
      
      - name: Run Pyright type checker (strict mode)
        run: |
          echo "=== Running Pyright strict type checking ==="
          pyright --project pyproject.toml \
            contracts.py \
            || echo "Pyright found issues - will be enforced after transition period"
      
      - name: Verify no **kwargs in public APIs
        run: |
          echo "=== Checking for **kwargs in public APIs ==="
          python -c "
          import re
          import sys
          
          files = [
              'contracts.py',
              'orchestrator.py', 
              'document_ingestion.py',
              'embedding_policy.py',
          ]
          
          issues = []
          for file in files:
              try:
                  with open(file) as f:
                      content = f.read()
                      # Look for public functions with **kwargs
                      matches = re.findall(r'^\s*def\s+([a-z_][a-z0-9_]*)\s*\([^)]*\*\*kwargs', content, re.MULTILINE)
                      if matches:
                          issues.append(f'{file}: Found **kwargs in public functions: {matches}')
              except FileNotFoundError:
                  pass
          
          if issues:
              print('WARNING: Found **kwargs in public APIs (should be deprecated):')
              for issue in issues:
                  print(f'  - {issue}')
              print('Note: **kwargs is discouraged in public APIs per design guidelines')
          else:
              print('✓ No **kwargs found in core public APIs')
          " || true

  contract-tests:
    name: Contract & Property Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest hypothesis pytest-cov
          # Install optional dependencies for full testing
          pip install contradiction_deteccion || echo "Optional contradiction module not available"
      
      - name: Run contract tests
        run: |
          echo "=== Running contract tests ==="
          REQUIRE_CONTRADICTION_MODULE=true pytest tests/test_contracts.py -v -m contract || echo "Contract tests failed (non-blocking during transition)"
      
      - name: Run property-based tests
        run: |
          echo "=== Running property-based tests with Hypothesis ==="
          pytest tests/test_property_based.py -v -m property --hypothesis-show-statistics || echo "Property tests failed (non-blocking during transition)"
      
      - name: Check contract test coverage
        run: |
          echo "=== Verifying contract test coverage ==="
          python -c "
          import sys
          import re
          import ast
          
          # Check that contract tests exist
          try:
              with open('tests/test_contracts.py') as f:
                  content = f.read()
                  contract_count = content.count('def test_')
                  print(f'✓ Found {contract_count} contract tests')
                  if contract_count < 5:
                      print('WARNING: Fewer than 5 contract tests found')
          except FileNotFoundError:
              print('ERROR: Contract test file not found')
              sys.exit(1)
          
          # Check for public interfaces without tests
          print('=== Checking public interface coverage ===')
          files_to_check = [
              'contracts.py',
              'orchestrator.py',
              'document_ingestion.py',
              'embedding_policy.py',
              'semantic_chunking_policy.py'
          ]
          
          missing_tests = []
          for file in files_to_check:
              try:
                  with open(file) as f:
                      tree = ast.parse(f.read())
                      
                  public_functions = []
                  for node in ast.walk(tree):
                      if isinstance(node, ast.FunctionDef) and not node.name.startswith('_'):
                          public_functions.append(node.name)
                      elif isinstance(node, ast.ClassDef) and not node.name.startswith('_'):
                          public_functions.append(node.name)
                  
                  # Check if tests exist for public functions
                  with open('tests/test_contracts.py') as f:
                      test_content = f.read()
                      
                  for func in public_functions:
                      test_name = f'def test_{func.lower()}'
                      if test_name not in test_content:
                          missing_tests.append(f'{file}:{func}')
                          
              except Exception as e:
                  print(f'Warning: Could not analyze {file}: {e}')
          
          if missing_tests:
              print('WARNING: Missing contract tests for public interfaces:')
              for item in missing_tests:
                  print(f'  - {item}')
              print('Consider adding contract tests for these interfaces')
          else:
              print('✓ All public interfaces appear to have contract test coverage')
          "

  lint-validation:
    name: Additional Linting & Policy Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      
      - name: Check for typing.Any usage
        run: |
          echo "=== Checking for typing.Any usage (should be minimal) ==="
          python -c "
          import re
          
          files = [
              'contracts.py',
              'orchestrator.py',
              'document_ingestion.py', 
              'embedding_policy.py',
          ]
          
          for file in files:
              try:
                  with open(file) as f:
                      lines = f.readlines()
                      any_lines = [
                          (i+1, line.strip()) 
                          for i, line in enumerate(lines) 
                          if ': Any' in line or '-> Any' in line
                      ]
                      if any_lines:
                          print(f'\\n{file} - Found Any usage:')
                          for lineno, line in any_lines[:5]:  # Show first 5
                              print(f'  Line {lineno}: {line[:80]}')
                      else:
                          print(f'✓ {file} - No Any usage found')
              except FileNotFoundError:
                  pass
          " || true
      
      - name: Verify frozen dataclasses
        run: |
          echo "=== Checking for frozen dataclasses ==="
          python -c "
          import re
          
          files = [
              'contracts.py',
              'document_ingestion.py',
          ]
          
          for file in files:
              try:
                  with open(file) as f:
                      content = f.read()
                      dataclasses = re.findall(r'@dataclass\([^)]*\)', content)
                      frozen_count = sum(1 for dc in dataclasses if 'frozen=True' in dc)
                      total_count = len(dataclasses)
                      print(f'{file}: {frozen_count}/{total_count} dataclasses are frozen')
              except FileNotFoundError:
                  pass
          " || true

  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [type-check, contract-tests, lint-validation]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "=== Type Safety & Contract Validation Summary ==="
          echo "✓ Type checking completed (strict mode being phased in)"
          echo "✓ Contract tests executed"
          echo "✓ Property-based tests executed" 
          echo "✓ Linting and policy checks completed"
          echo ""
          echo "Note: Some checks are non-blocking during transition period."
          echo "Zero tolerance for new violations in core modules."
